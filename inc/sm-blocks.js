// Generated by LiveScript 1.6.0
"use strict";
var smBlocks, slice$ = [].slice, arrayFrom$ = Array.from || function(x){return slice$.call(x);};
smBlocks = function(){
  var consoleError, consoleInfo, newPromise, newDelay, querySelectorChildren, querySelectorChild, queryFirstChildren, parseTemplate, soFetch, oFetch, S, M, newLoader, newResizer, newGroup, SUPERVISOR;
  consoleError = function(msg){
    var a;
    a = '%csm-blocks: %c' + msg;
    console.log(a, 'font-weight:bold;color:slateblue', 'color:orange');
  };
  consoleInfo = function(msg){
    var a;
    a = '%csm-blocks: %c' + msg;
    console.log(a, 'font-weight:bold;color:slateblue', 'color:aquamarine');
  };
  newPromise = function(id){
    var r, p;
    id == null && (id = -1);
    r = null;
    p = new Promise(function(resolve){
      r = resolve;
    });
    p.pending = id;
    p.resolve = function(data){
      p.pending = 0;
      r(data);
    };
    p.spin = function(data){
      var a;
      p.resolve(data);
      a = newPromise();
      p.resolve = a.resolve;
      p.spin = a.spin;
      return a;
    };
    return p;
  };
  newDelay = function(ms){
    var p, r, t;
    ms == null && (ms = 0);
    p = newPromise();
    r = p.resolve;
    t = setTimeout(function(){
      r(true);
    }, ms);
    p.resolve = function(flag){
      flag == null && (flag = true);
      clearTimeout(t);
      r(flag);
    };
    p.cancel = function(flag){
      flag == null && (flag = false);
      clearTimeout(t);
      r(flag);
    };
    return p;
  };
  querySelectorChildren = function(parentNode, selector){
    var a, i$, ref$, len$, b;
    a = [];
    if (!parentNode || !parentNode.children.length) {
      return a;
    }
    for (i$ = 0, len$ = (ref$ = parentNode.querySelectorAll(selector)).length; i$ < len$; ++i$) {
      b = ref$[i$];
      if (b.parentNode === parentNode) {
        a[a.length] = b;
      }
    }
    return a;
  };
  querySelectorChild = function(parentNode, selector){
    var a;
    if (!parentNode) {
      return null;
    }
    a = querySelectorChildren(parentNode, selector);
    return a.length ? a[0] : null;
  };
  queryFirstChildren = function(list){
    var a, i$, len$, b;
    if (!list || !list.length) {
      return null;
    }
    a = [];
    for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
      b = list[i$];
      a[a.length] = b.firstChild;
    }
    return a;
  };
  parseTemplate = function(f){
    var a, b;
    f = f.toString();
    a = f.indexOf('/*') + 2;
    b = f.lastIndexOf('*/') - 1;
    f = f.substring(a, b).trim().replace(/>\s+</g, '><');
    return f;
  };
  soFetch = httpFetch.create({
    baseUrl: '/?rest_route=/sm-blocks/kiss',
    mounted: true,
    notNull: true,
    method: 'POST'
  });
  oFetch = httpFetch.create({
    baseUrl: '/?rest_route=/sm-blocks/kiss',
    mounted: true,
    notNull: true,
    method: 'POST',
    timeout: 0,
    parseResponse: 'stream'
  });
  S = {
    section: function(){
      var Item, Block;
      Item = function(block, node, parent){
        var box, sect, a, i$, len$, c, b, this$ = this;
        this.block = block;
        this.node = node;
        this.parent = parent;
        this.config = JSON.parse(node.dataset.cfg);
        this.hovered = false;
        this.focused = false;
        this.opened = node.classList.contains('opened');
        this.titleBox = box = querySelectorChild(node, '.title');
        this.section = sect = querySelectorChild(node, '.section');
        if (box) {
          this.title = querySelectorChild(box, 'h3');
          this.arrow = querySelectorChild(box, '.arrow');
        } else {
          this.title = null;
          this.arrow = null;
        }
        this.hover = function(e){
          e.preventDefault();
          if (!this$.block.locked) {
            e.currentTarget.classList.add('h');
            if (!this$.hovered && (!this$.config.extra || e.currentTarget === this$.arrow)) {
              this$.hovered = true;
              this$.node.classList.add('hovered');
              if (!this$.config.extra) {
                if (e.currentTarget === this$.title) {
                  this$.arrow.classList.add('h');
                } else {
                  this$.title.classList.add('h');
                }
              }
              if (!this$.block.focused) {
                this$.block.onAutofocus(this$.arrow);
              }
            }
          }
        };
        this.unhover = function(e){
          e.preventDefault();
          if (!this$.block.locked) {
            e.currentTarget.classList.remove('h');
            if (this$.hovered) {
              this$.hovered = false;
              this$.node.classList.remove('hovered');
              if (!this$.config.extra) {
                if (e.currentTarget === this$.title) {
                  this$.arrow.classList.remove('h');
                } else {
                  this$.title.classList.remove('h');
                }
              }
            }
          }
        };
        this.focus = function(e){
          e.preventDefault();
          if (!this$.block.locked && !this$.focused) {
            this$.focused = this$.block.focused = true;
            if (e = this$.block.onFocus) {
              e(this$);
            }
            this$.node.classList.add('focused');
            this$.arrow.classList.add('f');
            if (!this$.config.extra) {
              this$.title.classList.add('f');
            }
          }
        };
        this.unfocus = function(e){
          e.preventDefault();
          if (!this$.block.locked && this$.focused) {
            this$.focused = this$.block.focused = false;
            if (e = this$.block.onFocus) {
              e(this$);
            }
            this$.node.classList.remove('focused');
            this$.arrow.classList.remove('f');
            if (!this$.config.extra) {
              this$.title.classList.remove('f');
            }
          }
        };
        this['switch'] = function(e){
          e.preventDefault();
          e.stopPropagation();
          if (!this$.block.locked && this$.config.arrow && (!this$.config.extra || e.currentTarget === this$.arrow)) {
            this$.opened = !this$.opened;
            this$.node.classList.toggle('opened', this$.opened);
            if (!this$.focused && this$.arrow) {
              this$.arrow.focus();
            }
            if (e = this$.block.onChange) {
              e(this$);
            }
          }
        };
        this.keydown = function(e){
          var ref$, a;
          if (this$.block.locked || ((ref$ = e.keyCode) !== 38 && ref$ !== 40 && ref$ !== 37 && ref$ !== 39 && ref$ !== 75 && ref$ !== 74 && ref$ !== 72 && ref$ !== 76)) {
            return;
          }
          e.preventDefault();
          e.stopPropagation();
          switch (e.keyCode) {
          case 38:
          case 75:
            if (a = this$.searchArrow(true)) {
              if ((e = this$.block.onRefocus) && e(this$, a, true)) {
                return;
              }
              a.arrow.focus();
            }
            break;
          case 40:
          case 74:
            if (a = this$.searchArrow(false)) {
              if ((e = this$.block.onRefocus) && e(this$, a, false)) {
                return;
              }
              a.arrow.focus();
            }
            break;
          case 37:
          case 72:
            if (this$.opened) {
              this$.opened = false;
              this$.node.classList.remove('opened');
              if (e = this$.block.onChange) {
                e(this$);
              }
            } else if (e = this$.block.onRefocus) {
              e(this$, null, true);
            }
            break;
          case 39:
          case 76:
            if (!this$.opened) {
              this$.opened = true;
              this$.node.classList.add('opened');
              if (e = this$.block.onChange) {
                e(this$);
              }
            } else if (e = this$.block.onRefocus) {
              e(this$, null, false);
            }
          }
        };
        if ((a = querySelectorChildren(sect, '.item')).length) {
          this.children = a;
          for (i$ = 0, len$ = a.length; i$ < len$; ++i$) {
            c = i$;
            b = a[i$];
            a[c] = new Item(block, b, this);
          }
        } else {
          this.children = null;
        }
      };
      Item.prototype = {
        attach: function(){
          var B, a, i$, len$, b;
          B = this.block;
          if (this.block.rootItem.config.mode & 4) {
            if (a = this.arrow) {
              a.addEventListener('pointerenter', this.hover);
              a.addEventListener('pointerleave', this.unhover);
              a.addEventListener('focusin', this.focus);
              a.addEventListener('focusout', this.unfocus);
              a.addEventListener('keydown', this.keydown);
              a.addEventListener('click', this['switch']);
            }
            if (a = this.title) {
              a.addEventListener('pointerenter', this.hover);
              a.addEventListener('pointerleave', this.unhover);
              a.addEventListener('click', this['switch']);
            }
          }
          if (a = this.children) {
            for (i$ = 0, len$ = a.length; i$ < len$; ++i$) {
              b = a[i$];
              b.attach();
            }
          }
        },
        detach: function(){
          true;
        },
        setClass: function(name, flag){
          var a, i$, len$, b;
          flag == null && (flag = true);
          if (a = this.children) {
            for (i$ = 0, len$ = a.length; i$ < len$; ++i$) {
              b = a[i$];
              b.setClass(name, flag);
            }
          }
          this.node.classList.toggle(name, flag);
        },
        searchArrow: function(direction){
          var a, b, c, d;
          if (direction) {
            if ((a = this).parent) {
              b = a.parent.children;
              c = b.indexOf(a);
              while (--c >= 0) {
                if (b[c].children) {
                  if (!(a = b[c]).opened) {
                    return a;
                  }
                  break;
                }
              }
              if (!~c) {
                return a.parent;
              }
            }
            while (b = a.children) {
              c = b.length;
              while (--c >= 0) {
                if (b[c].children) {
                  if (!(a = b[c]).opened) {
                    return a;
                  }
                  break;
                }
              }
              if (!~c) {
                break;
              }
            }
          } else {
            if ((a = this).opened) {
              if (!(b = a.children)) {
                return a;
              }
              c = -1;
              while (++c < b.length) {
                if (b[c].children) {
                  return b[c];
                }
              }
            }
            while (b = a.parent) {
              c = b.children;
              d = c.indexOf(a);
              while (++d < c.length) {
                if (c[d].children) {
                  return c[d];
                }
              }
              a = a.parent;
            }
          }
          return a;
        },
        getLastVisible: function(){
          var a;
          if (!(a = this.children) || !this.opened) {
            return this;
          }
          return a[a.length - 1].getLastVisible();
        },
        getNextVisible: function(){
          var a, b, c, d;
          if (this.children && this.opened) {
            return this.children[0];
          }
          a = this;
          while (b = a.parent) {
            c = b.children;
            if ((d = c.indexOf(a)) < c.length - 1) {
              return c[d + 1];
            }
            a = b;
          }
          return a;
        }
      };
      Block = function(root, state){
        var box, sect, item, list, a, b, this$ = this;
        this.root = root;
        this.rootBox = box = root.firstChild;
        this.rootItem = root = new Item(this, box, null);
        this.lines = querySelectorChildren(box, 'svg');
        this.sect = sect = {};
        this.item = item = {};
        this.list = list = [root];
        a = -1;
        while (++a < list.length) {
          if ((b = list[a]).children) {
            sect[b.config.id] = b;
            list.push.apply(list, b.children);
          }
          item[b.config.id] = b;
        }
        this.state = state;
        this.focused = false;
        this.locked = 1;
        this['class'] = {};
        this.onChange = null;
        this.onFocus = null;
        this.onRefocus = null;
        this.onAutofocus = function(node){
          if (this$.rootItem.config.autofocus) {
            if (this$.rootItem.arrow) {
              this$.rootItem.arrow.focus();
            } else if (node) {
              node.focus();
            }
          }
        };
      };
      Block.prototype = {
        init: async function(title){
          var a;
          if (title && !(a = this.rootItem.title.firstChild).textContent) {
            a.textContent = title;
          }
          this.rootItem.attach();
          this.root.classList.add('v');
          return true;
        },
        lock: function(level){
          switch (level) {
          case 1:
            if (!this.locked) {
              this.rootItem.setClass('v', false);
            }
            break;
          default:
            if (this.locked) {
              this.rootItem.setClass('v', true);
            }
          }
          this.locked = level;
        },
        setClass: function(k, v){
          var a;
          a = this['class'];
          if (!a.hasOwnProperty(k) || a[k] !== v) {
            a[k] = v;
            this.rootBox.classList.toggle(k, !!v);
          }
        },
        setTitle: function(name){
          this.rootItem.title.firstChild.textContent = name;
        },
        refresh: function(){},
        finit: function(){
          this.root.classList.remove('v');
          this.rootItem.detach();
        }
      };
      return function(node, state){
        return new Block(node, state);
      };
    }(),
    productCard: function(){
      var init, sizes, template, Items, Block;
      init = newPromise();
      sizes = null;
      template = parseTemplate(function(){
        /*
        <div>
        	<div class="section a">
        		<div class="image">
        			<img alt="product">
        			<svg preserveAspectRatio="none" fill-rule="evenodd" clip-rule="evenodd" shape-rendering="geometricPrecision" viewBox="0 0 270.92 270.92">
        				<path fill-rule="nonzero" d="M135.46 245.27c-28.39 0-54.21-10.93-73.72-28.67L216.6 61.74c17.74 19.51 28.67 45.33 28.67 73.72 0 60.55-49.26 109.81-109.81 109.81zm0-219.62c29.24 0 55.78 11.56 75.47 30.25L55.91 210.93c-18.7-19.7-30.25-46.23-30.25-75.47 0-60.55 49.26-109.81 109.8-109.81zm84.55 27.76c-.12-.16-.18-.35-.33-.5-.1-.09-.22-.12-.32-.2-21.4-21.7-51.09-35.19-83.9-35.19-65.03 0-117.94 52.91-117.94 117.94 0 32.81 13.5 62.52 35.2 83.91.08.09.11.22.2.31.14.14.33.2.49.32 21.24 20.63 50.17 33.4 82.05 33.4 65.03 0 117.94-52.91 117.94-117.94 0-31.88-12.77-60.8-33.39-82.05z"/>
        			</svg>
        		</div>
        	</div>
        	<div class="section b">
        		<div class="title"><div><span></span></div></div>
        		<div class="price">
        			<div class="currency"><span></span></div>
        			<div class="value a">
        				<div class="integer"><span></span></div>
        				<div class="fraction"><span></span><span></span></div>
        			</div>
        			<div class="value b">
        				<div class="integer"><span></span></div>
        				<div class="fraction"><span></span><span></span></div>
        			</div>
        		</div>
        	</div>
        	<div class="section c">
        		<div class="actions sm-buttons">
        			<button type="button" class="open"></button>
        			<button type="button" class="add-to-cart">
        				<svg preserveAspectRatio="none" viewBox="0 0 446.843 446.843">
        					<path d="M444.09 93.103a14.343 14.343 0 00-11.584-5.888H109.92c-.625 0-1.249.038-1.85.119l-13.276-38.27a14.352 14.352 0 00-8.3-8.646L19.586 14.134c-7.374-2.887-15.695.735-18.591 8.1-2.891 7.369.73 15.695 8.1 18.591l60.768 23.872 74.381 214.399c-3.283 1.144-6.065 3.663-7.332 7.187l-21.506 59.739a11.928 11.928 0 001.468 10.916 11.95 11.95 0 009.773 5.078h11.044c-6.844 7.616-11.044 17.646-11.044 28.675 0 23.718 19.298 43.012 43.012 43.012s43.012-19.294 43.012-43.012c0-11.029-4.2-21.059-11.044-28.675h93.776c-6.847 7.616-11.048 17.646-11.048 28.675 0 23.718 19.294 43.012 43.013 43.012 23.718 0 43.012-19.294 43.012-43.012 0-11.029-4.2-21.059-11.043-28.675h13.433c6.599 0 11.947-5.349 11.947-11.948s-5.349-11.947-11.947-11.947H143.647l13.319-36.996c1.72.724 3.578 1.152 5.523 1.152h210.278a14.33 14.33 0 0013.65-9.959l59.739-186.387a14.33 14.33 0 00-2.066-12.828zM169.659 409.807c-10.543 0-19.116-8.573-19.116-19.116s8.573-19.117 19.116-19.117 19.116 8.574 19.116 19.117-8.573 19.116-19.116 19.116zm157.708 0c-10.543 0-19.117-8.573-19.117-19.116s8.574-19.117 19.117-19.117c10.542 0 19.116 8.574 19.116 19.117s-8.574 19.116-19.116 19.116zm75.153-261.658h-73.161V115.89h83.499l-10.338 32.259zm-21.067 65.712h-52.094v-37.038h63.967l-11.873 37.038zm-146.882 0v-37.038h66.113v37.038h-66.113zm66.113 28.677v31.064h-66.113v-31.064h66.113zm-161.569-65.715h66.784v37.038h-53.933l-12.851-37.038zm95.456-28.674V115.89h66.113v32.259h-66.113zm-28.673-32.259v32.259h-76.734l-11.191-32.259h87.925zm-43.982 126.648h43.982v31.064h-33.206l-10.776-31.064zm167.443 31.065v-31.064h42.909l-9.955 31.064h-32.954z"/>
        				</svg>
        			</button>
        		</div>
        	</div>
        </div>
        */
      });
      Items = function(block){
        var this$ = this;
        this.image = new this.image(block);
        this.title = new this.title(block);
        this.price = new this.price(block);
        this.actions = new this.actions(block);
        (async function(){
          (await init);
          if (sizes[0] < 1) {
            this$.image.box.classList.add('h');
          } else {
            this$.image.box.classList.add('w');
          }
          return this$.image.ready.resolve();
        })();
      };
      Items.prototype = {
        image: function(){
          var Item;
          Item = function(block){
            var box, this$ = this;
            this.block = block;
            this.box = box = block.rootBox.querySelector('.image');
            this.image = box.firstChild;
            this.ready = newPromise();
            this.loaded = false;
            this.load = async function(){
              if (this$.image.complete && this$.image.naturalWidth >= 1 && this$.image.naturalHeight >= 1) {
                (await this$.ready);
                this$.box.classList.add('v');
                this$.loaded = true;
              }
              return true;
            };
          };
          Item.prototype = {
            set: function(data){
              var a, ref$, b;
              if (!data.image) {
                return true;
              }
              this.image.addEventListener('load', this.load);
              for (a in ref$ = data.image) {
                b = ref$[a];
                this.image[a] = b;
              }
              return true;
            },
            clear: function(){
              this.image.removeEventListener('load', this.load);
              if (this.loaded) {
                this.box.classList.remove('v');
                this.image.className = '';
                this.image.src = '';
                this.loaded = false;
              }
            }
          };
          return Item;
        }(),
        title: function(){
          var Item, eBreakMarkers;
          Item = function(block){
            var box;
            this.block = block;
            this.box = box = block.rootBox.querySelector('.title');
            this.title = box.firstChild;
          };
          eBreakMarkers = /\s+([\\\|/.]){1}\s+/;
          Item.prototype = {
            set: function(data){
              if (!(data = data.title)) {
                return true;
              }
              data = data.replace(eBreakMarkers, "\n");
              this.title.firstChild.textContent = data;
              return true;
            },
            clear: function(){
              this.title.firstChild.textContent = '';
            }
          };
          return Item;
        }(),
        price: function(){
          var Item, eBreakThousands, eNotNumber;
          Item = function(block){
            var box;
            this.block = block;
            this.box = box = block.rootBox.querySelector('.price');
            this.currency = querySelectorChild(box, '.currency');
            this.boxes = box = [querySelectorChild(box, '.value.a'), querySelectorChild(box, '.value.b')];
            this.values = [box[0].children[0], box[0].children[1], box[1].children[0], box[1].children[1]];
            this.money = [0, 0];
          };
          eBreakThousands = /\B(?=(\d{3})+(?!\d))/;
          eNotNumber = /[^0-9]/;
          Item.prototype = {
            set: function(data){
              var cfg, b, a, c, d;
              if (!(data = data.price)) {
                return true;
              }
              if (!(cfg = this.block.master.cfg.currency)) {
                return false;
              }
              b = data[0].split(eNotNumber, 2);
              a = data[1].split(eNotNumber, 2);
              a[1] = a[1]
                ? a[1].substring(0, cfg[3]).padEnd(cfg[3], '0')
                : '0'.repeat(cfg[3]);
              b[1] = b[1]
                ? b[1].substring(0, cfg[3]).padEnd(cfg[3], '0')
                : '0'.repeat(cfg[3]);
              c = this.money;
              d = +('1' + '0'.repeat(cfg[3]));
              c[0] = d * (+a[0]) + (+a[1]);
              c[1] = d * (+b[0]) + (+b[1]);
              if (cfg[2]) {
                a[0] = a[0].replace(eBreakThousands, cfg[2]);
                b[0] = b[0].replace(eBreakThousands, cfg[2]);
              }
              this.currency.firstChild.textContent = cfg[0];
              c = this.values;
              c[0].firstChild.textContent = a[0];
              c[1].firstChild.textContent = cfg[1];
              c[1].lastChild.textContent = a[1];
              c[2].firstChild.textContent = b[0];
              c[3].firstChild.textContent = cfg[1];
              c[3].lastChild.textContent = b[1];
              c = this.money;
              d = c[0] === c[1]
                ? 'equal'
                : c[0] > c[1] ? 'lower' : 'higher';
              this.box.classList.add(d);
              d = cfg[4] ? 'right' : 'left';
              this.box.classList.add(d);
              this.box.classList.add('v');
              return true;
            },
            clear: function(){
              this.box.className = 'price';
            }
          };
          return Item;
        }(),
        actions: function(){
          var Item;
          Item = function(block){
            var box, b, a;
            this.block = block;
            this.box = box = block.rootBox.querySelector('.actions');
            this.buttons = b = [box.querySelector('.add-to-cart'), box.querySelector('.open')];
            a = block.master.cfg.locale.product[0];
            b[1].textContent = a;
          };
          Item.prototype = {
            set: function(data){
              /***
              # prepare
              c = @data.config = []
              e = @data.value
              s = data.stock
              # set links
              e.0 and e.0.forEach (e) !->
              	e.href = data.link
              # set add-to-carts
              e.1 and e.1.forEach (e, i) !->
              	# check if product available
              	if s.status != 'instock'
              		e.classList.add 'none'
              		return
              	# check stock count and
              	# set initial button state
              	x = mCart.get data.id
              	if s.count == 0 or (x and s.count <= x.quantity)
              		e.disabled = true
              	# create event handler and
              	# store it for later removal
              	c[i] = f = (a) !->>
              		# prepare
              		a.preventDefault!
              		e.disabled = true
              		# add simple single product to cart
              		if not (a = await mCart.add data.id)
              			return
              		# reload cart items and
              		# check if more items may be added
              		if not await mCart.load!
              			return
              		x = mCart.get data.id
              		if not x or s.count <= x.quantity
              			return
              		# unlock
              		e.disabled = false
              	# set it
              	e.addEventListener 'click', f
              /***/
              return true;
            },
            clear: function(){
              true;
              /***
              # prepare
              c = @data.config
              e = @data.value
              # clear links
              e.0 and e.0.forEach (e) !->
              	e.href = ''
              # clear add-to-carts
              e.1 and e.1.forEach (e, i) !->
              	e.removeEventListener 'click', c[i]
              	e.disabled = false
              	e.classList.remove 'none'
              /***/
            },
            addToCart: async function(id){
              var a;
              a = (await soFetch({
                func: 'cart',
                op: 'set',
                id: id
              }));
              if (a instanceof Error) {
                return false;
              }
              a = wc_add_to_cart_params.wc_ajax_url.replace('%%endpoint%%', 'get_refreshed_fragments');
              a = (await httpFetch({
                url: a,
                notNull: true
              }));
              if (a instanceof Error) {
                return true;
              }
              jQuery(document.body).trigger('added_to_cart', [a.fragments, a.cart_hash, null]);
              return true;
            },
            getProduct: function(id){
              var a, ref$, b;
              if (!data) {
                return null;
              }
              for (a in ref$ = data) {
                b = ref$[a];
                if (b.product_id === id) {
                  return b;
                }
              }
              return null;
            }
          };
          return Item;
        }()
      };
      Block = function(master){
        var R;
        R = document.createElement('div');
        R.className = 'product';
        R.innerHTML = template;
        R.appendChild(master.root.children[1].cloneNode(true));
        this.master = master;
        this.root = R;
        this.rootBox = R.firstChild;
        this.id = -1;
        this.items = new Items(this);
      };
      Block.prototype = {
        set: function(record){
          var a, b;
          this.id = record.id;
          a = this.items;
          for (b in a) {
            if (!a[b].set(record)) {
              return false;
            }
          }
          this.root.classList.add('ready');
          return true;
        },
        clear: function(){
          var a, b;
          a = this.items;
          for (b in a) {
            a[b].clear();
          }
          this.root.classList.remove('ready');
        }
      };
      return function(m){
        var s, a, b;
        m = new Block(m);
        m.master.rootBox.appendChild(m.root);
        if (init.pending) {
          s = getComputedStyle(m.root);
          sizes = s = [parseInt(s.getPropertyValue('--a-size')), parseInt(s.getPropertyValue('--b-size')), parseInt(s.getPropertyValue('--c-size')), parseInt(s.getPropertyValue('padding-left')), parseInt(s.getPropertyValue('padding-right')), parseInt(s.getPropertyValue('padding-top')), parseInt(s.getPropertyValue('padding-bottom'))];
          a = m.master.resizer.sizes;
          b = a[1] - s[5] - s[6];
          a = a[0] - s[3] - s[4];
          s[0] = (b * s[0] / 100) / a;
          s[1] = (b * s[1] / 100) / a;
          s[2] = (b * s[2] / 100) / a;
          s[3] = a;
          s[4] = b;
          s.length = 5;
          init.resolve();
        }
        return m;
      };
    }()
  };
  M = {
    'products': function(){
      var Resizer, Block;
      Resizer = function(block){
        var this$ = this;
        this.block = block;
        this.style = getComputedStyle(block.rootBox);
        this.pads = [0, 0];
        this.layout = [0, 0, 0];
        this.gaps = [0, 0];
        this.sizes = [0, 0, 0];
        this.factor = 1;
        this.observer = null;
        this.onChange = null;
        this.debounce = newDelay();
        this.bounces = 0;
        this.resize = async function(e){
          var w, ref$, a, b, c, d;
          if (this$.debounce.pending) {
            this$.debounce.cancel(++this$.bounces === 3);
          }
          if (!(await (this$.debounce = newDelay(100)))) {
            return false;
          }
          this$.bounces = 0;
          w = e
            ? e[0].contentRect.width
            : this$.block.root.clientWidth - this$.pads[0];
          ref$ = this$.calculateLayout(w, 1), a = ref$[0], b = ref$[1], c = ref$[2], d = ref$[3];
          e = d > w ? w / d : 1;
          if (this$.onChange) {
            d = e;
            if ((e = this$.onChange(e)) < d) {
              ref$ = this$.calculateLayout(w, e), a = ref$[0], b = ref$[1], c = ref$[2];
            }
          }
          if (this$.layout[0] !== a) {
            this$.layout[0] = a;
            this$.block.rootBox.style.setProperty('--columns', a);
          }
          if (this$.layout[1] !== b) {
            this$.layout[1] = b;
            this$.block.rootBox.style.setProperty('--rows', b);
          }
          if ((a = this$.layout[2]) !== c) {
            this$.layout[2] = c;
            d = this$.block.items;
            b = d.length;
            if (c > a) {
              if (c < b) {
                b = c;
              }
              --a;
              while (++a < b) {
                d[a].root.classList.add('v');
              }
            } else {
              if (a > b) {
                a = b;
              }
              while (--a >= c) {
                d[a].root.classList.remove('v');
              }
            }
          }
          if (!this$.onChange && Math.abs(this$.factor - e) > 0.005) {
            a = this$.block.root.style;
            b = '--sm-blocks-factor';
            if ((this$.factor = e) === 1) {
              a.removeProperty(b);
            } else {
              a.setProperty(b, e);
            }
          }
          return true;
        };
      };
      Resizer.prototype = {
        init: function(){
          var a, s;
          a = this.block.config.layout;
          this.layout[0] = a[0];
          this.layout[1] = a[1];
          s = getComputedStyle(this.block.root);
          a = this.pads;
          a[0] = parseInt(s.getPropertyValue('padding-left'));
          a[0] += parseInt(s.getPropertyValue('padding-right'));
          a[1] = parseInt(s.getPropertyValue('padding-top'));
          a[1] += parseInt(s.getPropertyValue('padding-bottom'));
          s = this.style;
          a = this.gaps;
          a[0] = parseInt(s.getPropertyValue('--column-gap'));
          a[1] = parseInt(s.getPropertyValue('--row-gap'));
          a = this.sizes;
          a[0] = parseInt(s.getPropertyValue('--item-width'));
          a[1] = parseInt(s.getPropertyValue('--item-height'));
          a[2] = a[1] / a[0];
        },
        attach: function(){
          if (this.observer) {
            this.detach();
          }
          this.init();
          this.observer = new ResizeObserver(this.resize);
          this.observer.observe(this.block.root);
        },
        detach: function(){
          if (this.observer) {
            this.observer.disconnect();
            this.observer = null;
          }
        },
        calculateLayout: function(w, e){
          var C, a, b, c, d;
          C = this.block.config.layout;
          a = C[2];
          b = e * this.sizes[0];
          c = e * this.gaps[0];
          if (a && a < C[0]) {
            while ((d = a * b + (a - 1) * c) <= w && a < C[0]) {
              ++a;
            }
            if (d > w && a > C[2]) {
              --a;
              d = a * b + (a - 1) * c;
            }
            if (!(b = C[3])) {
              c = C[0] * C[1];
              b = c / a | 0;
              if (a * b < c) {
                ++b;
              }
            }
          } else {
            a = C[0];
            b = C[1];
            d = a * b + (a - 1) * c;
          }
          c = a * b;
          return [a, b, c, d];
        }
      };
      Block = function(state, root){
        var box;
        this.state = state;
        this.root = root;
        this.rootBox = box = root.firstChild;
        this.config = JSON.parse(box.dataset.cfg);
        this.cfg = null;
        this.items = [];
        this.resizer = new Resizer(this);
        this.loaded = 0;
        this.locked = -1;
      };
      Block.prototype = {
        group: 'products',
        level: 3,
        configure: function(o){
          var a;
          a = this.config.layout;
          o.limit = a[0] * a[1];
          o.order = this.config.orderTag;
        },
        init: function(cfg){
          var a, b, c;
          this.cfg = cfg;
          a = this.config.layout;
          b = this.rootBox.style;
          b.setProperty('--columns', a[0]);
          b.setProperty('--rows', a[1]);
          this.resizer.attach();
          a = a[0] * a[1];
          b = -1;
          c = this.items;
          while (++b < a) {
            c[c.length] = this.state.f.productCard(this);
          }
          return true;
        },
        lock: async function(level){
          var c0, c1;
          c0 = this.root.classList;
          c1 = this.rootBox.classList;
          if (this.locked !== level) {
            if (~level) {
              if (level) {
                if (~this.locked) {
                  c1.remove('v');
                } else {
                  c0.add('v');
                }
              } else {
                c1.add('v');
              }
            } else {
              if (this.locked) {
                c1.remove('v');
              }
              c0.remove('v');
            }
          }
          this.locked = level;
          return true;
        },
        notify: function(level){
          if (level > 0) {
            this.lock(1);
          }
          return true;
        },
        refresh: function(){
          true;
        },
        load: function(record, index){
          var I, a;
          I = this.items;
          if ((a = this.loaded) > index) {
            while (--a >= index) {
              I[a].clear();
            }
          }
          if (!I[index].set(record)) {
            return false;
          }
          this.loaded = index + 1;
          return true;
        }
      };
      return Block;
    }(),
    'category-filter': function(){
      var Checkbox, Block;
      Checkbox = function(block, item, parent){
        var cbox, a, i$, ref$, len$, b, c, this$ = this;
        parent == null && (parent = null);
        this.block = block;
        this.item = item;
        this.parent = parent;
        this.checkbox = cbox = item.titleBox ? querySelectorChild(item.titleBox, '.checkbox') : null;
        this.hovered = false;
        this.focused = false;
        this.state = 0;
        this.hover = function(e){
          e.preventDefault();
          if (!this$.block.locked && !this$.hovered) {
            this$.item.node.classList.add('hovered-2');
            this$.hovered = true;
            if (!this$.block.focused) {
              this$.block.onAutofocus(this$.checkbox);
            }
          }
        };
        this.unhover = function(e){
          e.preventDefault();
          if (this$.hovered) {
            this$.item.node.classList.remove('hovered-2');
            this$.hovered = false;
          }
        };
        this.focus = function(e){
          if (!this$.block.locked && !this$.focused) {
            this$.item.node.classList.add('focused-2');
            this$.focused = true;
            this$.block.onFocus(this$);
          } else {
            e.preventDefault();
            e.stopImmediatePropagation();
          }
        };
        this.unfocus = function(e){
          e.preventDefault();
          if (this$.focused) {
            this$.item.node.classList.remove('focused-2');
            this$.focused = false;
            this$.block.onFocus(this$);
          }
        };
        this.check = function(e){
          e.preventDefault();
          e.stopImmediatePropagation();
          if (this$.block.locked) {
            return;
          }
          this$.block.refresh(this$.toggleCheckbox());
          this$.checkbox.focus();
        };
        this.keydown = function(e){
          var ref$, a, b;
          if (this$.block.locked || ((ref$ = e.keyCode) !== 38 && ref$ !== 40 && ref$ !== 37 && ref$ !== 39 && ref$ !== 75 && ref$ !== 74 && ref$ !== 72 && ref$ !== 76)) {
            return;
          }
          e.preventDefault();
          e.stopPropagation();
          switch (e.keyCode) {
          case 38:
          case 75:
            a = this$.parent.children;
            if ((b = a.indexOf(this$)) === 0) {
              a = this$.parent;
            } else {
              a = a[b - 1].item.getLastVisible();
              a = this$.parent.get(a.config.id);
            }
            if (a.checkbox) {
              a.checkbox.focus();
            } else if (a.item.arrow) {
              a.item.arrow.focus();
            }
            break;
          case 40:
          case 74:
            a = this$.item.getNextVisible();
            a = this$.block.checks.get(a.config.id);
            if (a.checkbox) {
              a.checkbox.focus();
            } else if (a.item.arrow) {
              a.item.arrow.focus();
            }
            break;
          case 37:
          case 72:
            if (a = this$.item.arrow) {
              a.focus();
            }
            break;
          case 39:
          case 76:
            if (a = this$.item.arrow) {
              a.focus();
            }
          }
        };
        if (item.children) {
          this.children = a = [];
          for (i$ = 0, len$ = (ref$ = item.children).length; i$ < len$; ++i$) {
            b = i$;
            c = ref$[i$];
            a[b] = new Checkbox(block, c, this);
          }
        } else {
          this.children = null;
        }
        if (cbox) {
          a = cbox.parentNode;
          a.removeChild(cbox);
          a.insertBefore(cbox, a.firstChild);
        }
      };
      Checkbox.prototype = {
        attach: function(){
          var a, i$, len$, c;
          if (a = this.checkbox) {
            a.addEventListener('pointerenter', this.hover);
            a.addEventListener('pointerleave', this.unhover);
            a.addEventListener('focusin', this.focus);
            a.addEventListener('focusout', this.unfocus);
            a.addEventListener('click', this.check);
            a.addEventListener('keydown', this.keydown);
            a = this.item.title;
            a.addEventListener('pointerenter', this.hover);
            a.addEventListener('pointerleave', this.unhover);
            a.addEventListener('click', this.check);
            a.addEventListener('keydown', this.keydown);
          }
          if (a = this.children) {
            for (i$ = 0, len$ = a.length; i$ < len$; ++i$) {
              c = a[i$];
              c.attach();
            }
          }
        },
        detach: function(){
          true;
        },
        get: function(id){
          var c, i$, len$, a;
          if (id === this.item.config.id) {
            return this;
          }
          if (c = this.children) {
            for (i$ = 0, len$ = c.length; i$ < len$; ++i$) {
              a = c[i$];
              if (a = a.get(id)) {
                return a;
              }
            }
          }
          return null;
        },
        setChildren: function(items, v){
          var list, i$, len$, a;
          list = [];
          for (i$ = 0, len$ = items.length; i$ < len$; ++i$) {
            a = items[i$];
            if (a.state !== v) {
              a.state = v;
              list[list.length] = a;
              if (a.children) {
                list.push.apply(list, this.setChildren(a.children, v));
              }
            }
          }
          return list;
        },
        setParent: function(item, v){
          var a, i$, ref$, len$, b;
          if (v === 2) {
            a = 2;
          } else {
            a = v;
            for (i$ = 0, len$ = (ref$ = item.children).length; i$ < len$; ++i$) {
              b = ref$[i$];
              if (b.state !== a) {
                a = 2;
                break;
              }
            }
          }
          if (item.state === a) {
            b = [];
          } else {
            item.state = a;
            b = [item];
          }
          return item.parent ? this.setParent(item.parent, a).concat(b) : b;
        },
        toggleCheckbox: function(){
          var list;
          this.state = this.state === 2
            ? 1
            : this.state ? 0 : 1;
          list = [this];
          if (this.parent) {
            list.push.apply(list, this.setParent(this.parent, this.state));
          }
          if (this.children) {
            list.push.apply(list, this.setChildren(this.children, this.state));
          }
          return list;
        },
        getCheckedIds: function(){
          var list, i$, ref$, len$, a;
          list = this.state === 1 && this.item.config.count > 0
            ? [this.item.config.id]
            : [];
          if (this.children) {
            for (i$ = 0, len$ = (ref$ = this.children).length; i$ < len$; ++i$) {
              a = ref$[i$];
              list.push.apply(list, a.getCheckedIds());
            }
          }
          return list;
        }
      };
      Block = function(state, root, index){
        var rootBox, S, this$ = this;
        this.state = state;
        this.root = root;
        this.index = index;
        this.rootBox = rootBox = root.firstChild;
        this.section = S = state.f.section(root);
        this.checks = new Checkbox(this, S.rootItem);
        this.locked = -1;
        this.focused = false;
        S.onRefocus = function(i1, i2, direction){
          var a;
          a = null;
          if (i2) {
            if (!i1.parent) {
              if (direction) {
                a = i1.getLastVisible();
                a = this$.checks.get(a.config.id);
              } else {
                a = this$.checks.get(i1.children[0].config.id);
              }
            }
          } else {
            a = this$.checks.get(i1.config.id);
          }
          if (a && a.checkbox) {
            a.checkbox.focus();
          }
          return !!a;
        };
        this.onFocus = S.onFocus = function(){
          var p;
          p = null;
          return async function(item){
            if (p && p.pending) {
              p.resolve(false);
            }
            if (item.focused) {
              this$.focused = true;
              this$.root.classList.add('f');
            } else if ((await (p = newDelay(60)))) {
              this$.focused = false;
              this$.root.classList.remove('f');
            }
            return true;
          };
        }();
        this.onAutofocus = S.onAutofocus = function(node){
          var a;
          if (!this$.focused && (a = S.rootItem).config.autofocus) {
            if (a.arrow) {
              a.arrow.focus();
            } else {
              a.checks.checkbox.focus();
            }
          }
        };
      };
      Block.prototype = {
        group: 'category',
        level: 2,
        init: async function(cfg){
          cfg = cfg.locale.category[0];
          if (!(await this.section.init(cfg))) {
            return false;
          }
          this.checks.attach();
          this.state.data[this.index] = [];
          return true;
        },
        lock: async function(level){
          if (level !== this.locked) {
            (await this.section.lock(level));
          }
          this.locked = level;
          return true;
        },
        notify: function(){
          return true;
        },
        refresh: function(list){
          var i$, len$, a, b, d, c;
          if (list) {
            for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
              a = list[i$];
              b = a.item.node.classList;
              switch (a.state) {
              case 2:
                b.add('checked', 'c2');
                b.remove('c1');
                break;
              case 1:
                b.add('checked', 'c1');
                b.remove('c2');
                break;
              default:
                b.remove('checked', 'c1', 'c2');
              }
            }
          }
          if (this.index < 0) {
            return;
          }
          a = this.checks.getCheckedIds();
          b = this.state.data[this.index];
          if (d = (c = a.length) === b.length) {
            while (--c >= 0) {
              if (a[c] !== b[c]) {
                d = false;
                break;
              }
            }
          }
          if (!d) {
            b.length = c = a.length;
            while (--c >= 0) {
              b[c] = a[c];
            }
            state.change();
          }
        }
      };
      return Block;
    }(),
    'price-filter': function(){
      var InputNum, TextInputs, Block;
      InputNum = function(id, box){
        var this$ = this;
        this.id = id;
        this.box = box;
        this.input = box.children[0];
        this.label = box.children[1];
        this.value = '';
        this.state = ['', '', 0, 0];
        this.changed = false;
        this.hovered = false;
        this.focused = false;
        this.locked = true;
        this.regex = /^[0-9]{0,9}$/;
        this.onHover = null;
        this.onFocus = null;
        this.onSubmit = null;
        this.onScroll = null;
        this.onChange = null;
        this.hover = function(e){
          e.preventDefault();
          e.stopPropagation();
          if (!this$.locked) {
            this$.hovered = true;
            this$.box.classList.add('hovered');
            if (e = this$.onHover) {
              e(this$);
            }
          }
        };
        this.unhover = function(e){
          e.preventDefault();
          if (this$.hovered) {
            this$.hovered = false;
            this$.box.classList.remove('hovered');
            if (e = this$.onHover) {
              e(this$);
            }
          }
        };
        this.focus = function(e){
          if (this$.locked) {
            e.preventDefault();
            e.stopPropagation();
          } else {
            this$.focused = true;
            this$.box.classList.add('focused');
            this$.select();
            if (e = this$.onFocus) {
              e(this$);
            }
          }
        };
        this.unfocus = function(e){
          this$.focused = false;
          this$.box.classList.remove('focused');
          if (e = this$.onFocus) {
            e(this$);
          }
        };
        this.inputChange = function(e){
          var s, v, w;
          s = this$.state;
          v = this$.input.value;
          w = this$.value;
          if (v.length) {
            if (!this$.regex.test(v)) {
              this$.input.value = s[1];
              this$.input.setSelectionRange(s[2], s[3]);
            } else {
              if (this$.onChange && v !== this$.value) {
                v = this$.onChange(this$, v);
              }
              s[1] = this$.value = v;
              s[2] = this$.input.selectionStart;
              s[3] = this$.input.selectionEnd;
              return true;
            }
          } else {
            this$.set(s[0]);
            this$.input.select();
          }
          e.preventDefault();
          e.stopPropagation();
          return false;
        };
        this.inputKey = function(e){
          var ref$;
          if (this$.locked) {
            return;
          }
          if (e.keyCode === 13) {
            if (!this$.onSubmit) {
              return;
            }
            this$.onSubmit(this$, e.ctrlKey);
          } else if ((ref$ = e.keyCode) === 38 || ref$ === 40) {
            if (!this$.onScroll) {
              return;
            }
            if (this$.onScroll(this$, e.keyCode === 38)) {
              this$.input.select();
            }
          } else {
            return;
          }
          e.preventDefault();
          e.stopPropagation();
        };
        this.inputWheel = function(e){
          if (this$.locked || !this$.onScroll) {
            return false;
          }
          e.preventDefault();
          e.stopPropagation();
          this$.onScroll(this$, e.deltaY < 0);
          if (this$.focused) {
            this$.select();
          }
        };
        this.onLabel = function(e){
          if (this$.locked || !this$.focused || !this$.onSubmit) {
            return;
          }
          e.preventDefault();
          e.stopPropagation();
          if (this$.value !== this$.state[0]) {
            this$.set(this$.state[0]);
            this$.input.select();
            this$.onSubmit(this$, true);
          }
        };
      };
      InputNum.prototype = {
        init: function(label, v){
          this.label.textContent = label;
          this.set(v);
          this.state[0] = v;
        },
        attach: function(){
          this.box.addEventListener('pointerenter', this.hover);
          this.box.addEventListener('pointerleave', this.unhover);
          this.box.addEventListener('wheel', this.inputWheel);
          this.input.addEventListener('focusin', this.focus);
          this.input.addEventListener('focusout', this.unfocus);
          this.input.addEventListener('input', this.inputChange, true);
          this.input.addEventListener('keydown', this.inputKey, true);
          this.label.addEventListener('pointerdown', this.labelClick, true);
        },
        detach: function(){},
        set: function(v){
          var s;
          s = this.state;
          s[1] = this.input.value = this.value = '' + v;
          s[2] = 0;
          s[3] = s[1].length;
        },
        lock: function(flag){
          if (flag === this.locked) {
            return;
          }
          this.locked = flag;
          this.input.readOnly = flag;
          this.input.value = flag
            ? ''
            : this.value;
          this.box.classList.toggle('locked', flag);
        },
        select: function(){
          var s;
          s = this.state;
          s[2] = 0;
          s[3] = this.value.length;
          this.input.select();
        }
      };
      TextInputs = function(block, box){
        var n0, n1, this$ = this;
        this.block = block;
        this.box = box;
        this.n0 = n0 = new InputNum(0, box.children[0]);
        this.svg = box.children[1];
        this.rst = querySelectorChild(this.svg, '.X');
        this.n1 = n1 = new InputNum(1, box.children[2]);
        this.changed = 0;
        this.hovered = false;
        this.focused = false;
        this.locked = true;
        this.onFocus = null;
        n0.onHover = n1.onHover = function(o){
          this$.box.classList.toggle('h' + o.id, o.hovered);
          if (!this$.block.focused) {
            this$.block.onAutofocus(o.input);
          }
        };
        n0.onFocus = n1.onFocus = function(o){
          var v;
          v = o.focused;
          this$.box.classList.toggle('f' + o.id, v);
          if (this$.focused = v) {
            o.select();
          } else {
            this$.check(o.id);
            if (this$.changed) {
              this$.changed = 0;
              this$.block.submit();
            }
          }
          if (o = this$.onFocus) {
            o(this$);
          }
        };
        n0.onSubmit = n1.onSubmit = function(o, strict){
          if (!this$.check(o.id) && strict) {
            o.select();
            return;
          }
          if (this$.changed) {
            this$.changed = 0;
            this$.block.submit();
          }
          if (!strict) {
            o = o === this$.n1
              ? this$.n0
              : this$.n1;
            o.input.focus();
          }
        };
        n0.onScroll = n1.onScroll = function(o, direction){
          var c, d, a, b, e;
          c = this$.block.current;
          d = c[4] - c[3];
          if (d > 200) {
            a = d / 100 | 0;
            b = '' + a;
            if ((e = b.length) > 1) {
              e = e > 2 ? e - 2 : 1;
              b = b.slice(0, -e) + '0'.repeat(e);
              a = +b;
            } else {
              e = 0;
            }
          } else {
            e = 0;
            a = 1;
          }
          b = +o.value;
          if (direction) {
            b += a;
          } else {
            b -= a;
          }
          a = e ? +(('' + b).slice(0, -e) + '0'.repeat(e)) : b;
          if (o.id) {
            b = a;
            a = +this$.n0.value;
            if (b >= c[4]) {
              b = c[4];
            } else if (b <= a) {
              b = a + 1;
            }
          } else {
            b = +this$.n1.value;
            if (a <= c[3]) {
              a = c[3];
            } else if (a >= b) {
              a = b - 1;
            }
          }
          this$.set(a, b);
          this$.check(o.id);
          if (this$.changed) {
            this$.changed = 0;
            this$.block.submit();
          }
          return true;
        };
        this.hover = function(e){
          e.preventDefault();
          if (!this$.locked && !this$.hovered) {
            this$.hovered = true;
            this$.box.classList.add('hovered');
            if (!this$.block.focused) {
              this$.block.onAutofocus();
            }
          }
        };
        this.unhover = function(e){
          e.preventDefault();
          if (this$.hovered) {
            this$.hovered = false;
            this$.box.classList.remove('hovered');
          }
        };
        this.reset = function(e){
          var c;
          if (!this$.locked) {
            if (e) {
              e.preventDefault();
              e.stopPropagation();
            }
            if ((c = this$.block.current)[0]) {
              c[0] = false;
              c[1] = c[2] = -1;
              this$.set(c[3], c[4]);
              this$.changed = 0;
              this$.block.submit();
            }
          }
        };
      };
      TextInputs.prototype = {
        init: function(locale){
          var c;
          c = this.block.current;
          this.n0.init(locale.min, c[3]);
          this.n1.init(locale.max, c[4]);
        },
        attach: function(){
          this.box.addEventListener('pointerenter', this.hover);
          this.box.addEventListener('pointerleave', this.unhover);
          this.n0.attach();
          this.n1.attach();
          if (this.rst) {
            this.rst.addEventListener('click', this.reset);
          }
        },
        detach: function(){},
        set: function(min, max){
          this.n0.set(min);
          this.n1.set(max);
        },
        check: function(id){
          var a, b, c, d;
          a = +this.n0.value;
          b = +this.n1.value;
          c = this.block.current;
          d = true;
          if (a > b) {
            d = a;
            a = b;
            b = d;
            d = false;
          } else if (a === b) {
            if (id) {
              if ((a = c[3]) === b) {
                ++b;
              }
            } else {
              if ((b = c[4]) === a) {
                --a;
              }
            }
            d = false;
          }
          if (a >= c[4] || a < c[3]) {
            d = false;
            a = c[0]
              ? c[1]
              : c[3];
          } else if (a < c[3]) {
            d = false;
            a = c[3];
          }
          if (b <= c[3]) {
            d = false;
            b = c[0]
              ? c[2]
              : c[4];
          } else if (b > c[4]) {
            d = false;
            b = c[4];
          }
          if (!d) {
            this.set(a, b);
          }
          if (a === c[3] && b === c[4]) {
            if (c[0]) {
              ++this.changed;
            }
            c[0] = false;
            c[1] = c[2] = -1;
          } else {
            if (!c[0] || (a !== c[1] || b !== c[2])) {
              ++this.changed;
            }
            c[0] = true;
            c[1] = a;
            c[2] = b;
          }
          return d;
        },
        lock: function(flag){
          if (this.locked === flag) {
            return;
          }
          this.locked = flag;
          this.n0.lock(flag);
          this.n1.lock(flag);
        },
        focus: function(){
          this.n0.input.focus();
        }
      };
      Block = function(state, root, index){
        var box, mode, I, S, this$ = this;
        this.state = state;
        this.root = root;
        this.index = index;
        this.rootBox = box = root.firstChild;
        this.config = JSON.parse(root.dataset.cfg);
        mode = box.classList.contains('text') ? 0 : 1;
        this.inputs = I = new TextInputs(this, box);
        this.section = S = state.f.section(root.parentNode.parentNode.parentNode);
        this.locked = -1;
        this.mode = mode;
        this.focused = false;
        this.current = [false, -1, -1, -1, -1];
        this.pending = false;
        this.onAutofocus = S.onAutofocus;
        S.onChange = function(o){
          var c;
          if (!this$.config.sectionSwitch || o.parent) {
            return;
          }
          c = this$.current;
          if (o.opened) {
            if (!c[0] && (~c[1] || ~c[2])) {
              c[0] = true;
              this$.submit();
            }
          } else {
            if (c[0]) {
              c[0] = false;
              this$.submit();
            }
          }
        };
        I.onFocus = S.onFocus = function(){
          var p;
          p = null;
          return async function(o){
            if (p && p.pending) {
              p.resolve(false);
            }
            if (o.focused) {
              this$.focused = this$.section.focused = true;
              this$.section.root.classList.add('f');
            } else if ((await (p = newDelay(60)))) {
              this$.focused = this$.section.focused = false;
              this$.section.root.classList.remove('f');
            }
            return true;
          };
        }();
        S.onRefocus = function(i1, i2, direction){
          if (i2) {
            if (direction) {
              this$.inputs.n1.input.focus();
            } else {
              this$.inputs.n0.input.focus();
            }
            return true;
          }
          return false;
        };
      };
      Block.prototype = {
        group: 'price',
        level: 2,
        init: async function(cfg){
          var ref$, ref1$;
          if (!(await this.section.init(cfg.locale.price.title))) {
            return false;
          }
          ref1$ = this.state.data, (ref$ = this.current)[0] = ref1$[0], ref$[1] = ref1$[1], ref$[2] = ref1$[2], ref$[3] = ref1$[3], ref$[4] = ref1$[4];
          this.inputs.init(cfg.locale.price);
          this.inputs.attach();
          return true;
        },
        lock: async function(level){
          var c0, c1;
          c0 = this.root.classList;
          c1 = this.rootBox.classList;
          if (level !== this.locked) {
            if (~level) {
              if (level) {
                if (!~this.locked) {
                  c1.add('v');
                  c0.add('v');
                }
                this.inputs.lock(1);
                this.section.lock(1);
              } else {
                this.section.lock(0);
                this.inputs.lock(0);
              }
            } else {
              c1.remove('v');
              c0.remove('v');
              this.section.lock(-1);
            }
          }
          this.locked = level;
          return true;
        },
        notify: function(){
          return true;
        },
        refresh: function(){
          var a, b;
          a = this.state.data;
          b = this.current;
          if (a[0] !== b[0]) {
            this.rootBox.classList.toggle('active', a[0]);
            this.section.setClass('active', a[0]);
          }
          if (a[0] !== b[0] || a[1] !== b[1] || a[2] !== b[2]) {
            this.inputs.set(a[1], a[2]);
          }
          b[0] = a[0], b[1] = a[1], b[2] = a[2], b[3] = a[3], b[4] = a[4];
        },
        submit: function(){
          var p;
          p = newDelay(0);
          return async function(){
            var a, b;
            p.cancel();
            a = this.current;
            b = this.state.data;
            if (a[0] !== b[0]) {
              this.rootBox.classList.toggle('active', a[0]);
              this.section.setClass('active', a[0]);
            }
            b[0] = a[0], b[1] = a[1], b[2] = a[2];
            this.pending = true;
            if ((await (p = newDelay(400)))) {
              this.pending = false;
              this.state.change();
            }
            return true;
          };
        }()
      };
      return Block;
    }(),
    'paginator': function(){
      var Control, Resizer, PageGoto, PageRange, Block;
      Control = function(block){
        var this$ = this;
        this.block = block;
        this.lock = newDelay();
        this.dragbox = [0, 0, 0, 0, 0, 0, 0, 0];
        this.fastCfg = this.fastCfg;
        this.keyDown = function(e){
          var B, a;
          B = this$.block;
          if (B.locked || !B.range.mode || this$.lock.pending) {
            return;
          }
          switch (e.code) {
          case 'ArrowLeft':
          case 'ArrowDown':
            a = (a = B.gotos.btnPN).length ? a[0] : null;
            this$.fastGo(null, a, false);
            break;
          case 'ArrowRight':
          case 'ArrowUp':
            a = (a = B.gotos.btnPN).length ? a[1] : null;
            this$.fastGo(null, a, true);
            break;
          default:
            return;
          }
          e.preventDefault();
          e.stopPropagation();
        };
        this.keyUp = function(e){
          if (this$.lock.pending === 1) {
            e.preventDefault();
            e.stopPropagation();
            this$.lock.resolve();
          }
        };
        this.setFocus = function(e){
          e.preventDefault();
          e.stopPropagation();
          this$.block.focus();
        };
        this.hover = function(e){
          e.preventDefault();
          e.stopPropagation();
          if (!this$.block.locked && this$.block.range.mode && (e = e.currentTarget)) {
            e.classList.add('hovered');
          }
        };
        this.unhover = function(e){
          e.preventDefault();
          e.stopPropagation();
          if (e = e.currentTarget) {
            e.classList.remove('hovered');
          }
        };
        this.goto = function(e){
          var B, S, R, a, b;
          e.preventDefault();
          e.stopPropagation();
          if (this$.block.locked || this$.lock.pending) {
            return;
          }
          console.log('page.click');
          B = this$.block;
          S = B.state;
          R = B.range;
          a = e.currentTarget.parentNode;
          b = a.classList;
          if (b.contains('page')) {
            a = R.nPages[R.pages.indexOf(a)] - 1;
          } else if (b.contains('FL')) {
            if (b.contains('F')) {
              a = 0;
            } else {
              a = S.data[1] - 1;
            }
          } else if (b.contains('P')) {
            if ((a = S.data[0] - 1) < 0) {
              a = S.data[1] - 1;
            }
          } else {
            if ((a = S.data[0] + 1) >= S.data[1]) {
              a = 0;
            }
          }
          if (a === S.data[0]) {
            return;
          }
          S.data[0] = a;
          S.change();
          B.refresh();
          R.focus();
        };
        this.fastGoto = async function(e){
          var a, b;
          e.preventDefault();
          e.stopPropagation();
          if (!this$.lock.pending && e.isPrimary && !e.button && !this$.block.locked && this$.block.range.mode === 1) {
            a = e.currentTarget;
            b = a === this$.block.gotos.btnPN[1];
            console.log('fast.start', b);
            this$.fastGo(e, a, b);
          } else if (this$.lock.pending === 2) {
            console.log('fast.stop');
            this$.lock.resolve();
          }
          return true;
        };
        this.dragStart = async function(e){
          var B, lock, a, R;
          e.preventDefault();
          e.stopPropagation();
          B = this$.block;
          if (!e.isPrimary || e.button || typeof e.offsetX !== 'number' || B.locked || !B.range.mode || B.state.data[1] === 1 || this$.lock.pending) {
            return true;
          }
          this$.lock = lock = newPromise(3);
          (await Promise.race([newDelay(200), lock]));
          if (!lock.pending) {
            return true;
          }
          this$.initDragbox();
          a = B.state.data[0];
          (R = B.range).focus();
          R.box.classList.add('active', 'drag');
          if (!R.box.hasPointerCapture(e.pointerId)) {
            R.box.setPointerCapture(e.pointerId);
          }
          lock.pending = 4;
          (await lock);
          if (R.box.hasPointerCapture(e.pointerId)) {
            R.box.releasePointerCapture(e.pointerId);
          }
          R.box.classList.remove('active', 'drag');
          if (!this$.block.locked && a !== B.state.data[0]) {
            B.state.change();
          }
          return true;
        };
        this.dragStop = function(e){
          var ref$;
          e.preventDefault();
          e.stopPropagation();
          if ((ref$ = this$.lock.pending) === 3 || ref$ === 4) {
            this$.lock.resolve();
          }
        };
        this.drag = function(e){
          var D, S, b, a;
          e.preventDefault();
          e.stopPropagation();
          if (this$.block.locked || this$.lock.pending !== 4) {
            return;
          }
          D = this$.dragbox;
          S = this$.block.state.data;
          if ((b = e.offsetX) <= 0) {
            a = 0;
          } else if (b <= D[0]) {
            a = b * D[5] / D[0] | 0;
          } else if ((b -= D[0]) <= D[1]) {
            a = D[5];
          } else if ((b -= D[1]) <= D[2]) {
            b = b * D[6] / D[2] | 0;
            a = D[5] + 1 + b;
          } else if ((b -= D[2]) <= D[3]) {
            a = D[5] + D[6] + 1;
          } else if ((b -= D[3]) <= D[4]) {
            a = D[5] + D[6] + 2 + b * D[7] / D[4] | 0;
          } else {
            a = S[1] - 1;
          }
          if (S[0] !== a) {
            S[0] = a;
            this$.block.refresh();
          }
        };
        this.wheel = function(e){
          var a, b, i$, ref$, len$;
          if (this$.lock || this$.block.locked || !this$.block.range.mode) {
            return;
          }
          e.preventDefault();
          e.stopPropagation();
          a = state.data[0];
          if ((b = state.data[1] - 1) === 0) {
            return;
          }
          a = a + 1 * Math.sign(e.deltaY);
          if (a > b) {
            a = 0;
          } else if (a < 0) {
            a = b;
          }
          state.data[0] = a;
          state.master.resolve(state);
          for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
            b = ref$[i$];
            b.refresh();
          }
          this$.block.focus();
        };
      };
      Control.prototype = {
        attach: function(){
          var B, R, a, i$, ref$, len$, b;
          B = this.block;
          R = B.range;
          B.root.addEventListener('keydown', this.keyDown, true);
          B.root.addEventListener('keyup', this.keyUp, true);
          B.root.addEventListener('click', this.setFocus);
          B.rootBox.addEventListener('wheel', this.wheel, true);
          B.rootBox.addEventListener('pointerenter', this.hover);
          B.rootBox.addEventListener('pointerleave', this.unhover);
          if (a = B.gotos.btnFL) {
            a[0].addEventListener('click', this.goto);
            a[1].addEventListener('click', this.goto);
          }
          if (a = B.gotos.btnPN) {
            a[0].addEventListener('pointerdown', this.fastGoto);
            a[0].addEventListener('pointerup', this.fastGoto);
            a[1].addEventListener('pointerdown', this.fastGoto);
            a[1].addEventListener('pointerup', this.fastGoto);
          }
          for (i$ = 0, len$ = (ref$ = R.pages).length; i$ < len$; ++i$) {
            b = i$;
            a = ref$[i$];
            a.firstChild.addEventListener('click', this.goto);
          }
          a = R.pages[R.index].firstChild;
          a.addEventListener('pointerdown', this.dragStart);
          B.range.box.addEventListener('pointermove', this.drag);
          B.range.box.addEventListener('pointerup', this.dragStop);
        },
        detach: function(){
          true;
        },
        fastGo: async function(event, btn, step){
          var B, S, lock, first, a, b, c, beg, end, d;
          B = this.block;
          if ((S = B.state).data[1] === 1) {
            return false;
          }
          this.lock = lock = newPromise(event ? 2 : 1);
          step = (step > 0 && 1) || -1;
          if ((first = S.data[0] + step) >= S.data[1]) {
            first = 0;
          } else if (first < 0) {
            first = S.data[1] - 1;
          }
          S.data[0] = first;
          (await this.fastUpdate());
          (await Promise.race([newDelay(200), lock]));
          if (!lock.pending) {
            S.change();
            return true;
          }
          B.range.box.classList.add('active');
          btn.parentNode.classList.add('active');
          if (event && !btn.hasPointerCapture(event.pointerId)) {
            btn.setPointerCapture(event.pointerId);
          }
          a = first;
          b = step;
          c = this.fastCfg[1];
          if (step > 0) {
            beg = 0;
            end = S.data[1];
          } else {
            beg = S.data[1] - 1;
            end = -1;
          }
          while (lock.pending) {
            if ((a = a + b) === end) {
              a = beg;
              b = step;
              c = this.fastCfg[1];
            }
            S.data[0] = a;
            (await this.fastUpdate());
            if ((d = end - step - step * a) <= this.fastCfg[1]) {
              b = step;
              d = 1000 / (1 + d);
              (await Promise.race([newDelay(d), lock]));
            } else if (step * b < this.fastCfg[0] && --c === 0) {
              b = b + step;
              c = this.fastCfg[1];
            }
          }
          if (event && btn.hasPointerCapture(event.pointerId)) {
            btn.releasePointerCapture(event.pointerId);
          }
          btn.parentNode.classList.remove('active');
          B.range.box.classList.remove('active');
          if (S.data[0] !== first) {
            S.change();
          }
          return true;
        },
        fastUpdate: function(){
          var a, b;
          a = newPromise();
          b = this.block;
          requestAnimationFrame(function(){
            b.refresh();
            b.range.focus();
            requestAnimationFrame(function(){
              a.resolve();
            });
          });
          return a;
        },
        initDragbox: function(){
          var R, S, D, X, a, b, c, d;
          R = this.block.range;
          S = this.block.resizer;
          D = this.dragbox;
          X = this.block.state.data[1];
          a = R.index;
          b = R.pages.length - a - 1;
          c = S.currentSz[2];
          d = S.currentSz[3];
          D[0] = c + a * d;
          D[1] = D[0] / (a + 1);
          D[0] = D[0] - D[1];
          D[4] = c + b * d;
          D[3] = D[4] / (b + 1);
          D[4] = D[4] - D[3];
          D[2] = parseFloat(R.cs.getPropertyValue('width'));
          D[2] = D[2] - D[0] - D[4];
          if (R.mode === 1) {
            c = D[2] / (X - a - b);
            if ((d = D[1] / 2) > c) {
              D[1] = c + d;
              D[3] = c + D[3] / 2;
            }
          }
          D[2] = D[2] - D[1] - D[3];
          D[5] = a;
          D[7] = b;
          D[6] = X - a - b - 2;
        },
        fastCfg: [10, 15]
      };
      Resizer = function(block){
        var this$ = this;
        this.block = block;
        this.rootCS = getComputedStyle(block.root);
        this.rootBoxCS = getComputedStyle(block.rootBox);
        this.pads = [0, 0];
        this.baseSz = [0, 0, 0, 0, 0];
        this.currentSz = [0, 0, 0, 0];
        this.factor = 1;
        this.observer = null;
        this.onChange = null;
        this.debounce = newDelay();
        this.bounces = 0;
        this.resize = async function(e){
          var B, R, w, b, a, c;
          if (this$.debounce.pending) {
            this$.debounce.cancel(++this$.bounces === 3);
          }
          if (!(await (this$.debounce = newDelay(100)))) {
            return false;
          }
          this$.bounces = 0;
          B = this$.block;
          R = this$.block.range;
          w = e
            ? e[0].contentRect.width
            : B.root.clientWidth - this$.pads[0];
          this$.currentSz[0] = w;
          e = w > this$.baseSz[0]
            ? 1
            : w / this$.baseSz[0];
          if (this$.onChange) {
            e = this$.onChange(e);
          }
          this$.currentSz[1] = e === 1
            ? 0
            : e * this$.baseSz[1];
          if (Math.abs(this$.factor - e) > 0.005) {
            this$.currentSz[2] = e * this$.baseSz[3];
            this$.currentSz[3] = e * this$.baseSz[4];
            if (!this$.onChange) {
              b = '--sm-blocks-factor';
              if (~a) {
                B.root.style.setProperty(b, e);
              } else {
                B.root.style.removeProperty(b);
              }
            }
            this$.factor = e;
          }
          return true;
          if (B.config.range && R.mode === 1 && e === 1) {
            debugger;
            a = (w - this$.baseSz[0] + this$.baseSz[3]) / B.current[1];
            b = (w - this$.baseSz[0] + this$.baseSz[4]) / B.current[1];
            if (Math.abs(a - this$.currentSz[2]) > 0.1) {
              this$.currentSz[2] = a;
              this$.currentSz[3] = b;
              c = '--page-size';
              if (Math.abs(b - this$.baseSz[4]) > 0.1) {
                R.box.style.setProperty(c, b + 'px');
              } else {
                R.box.style.removeProperty(c);
              }
            }
          }
          return true;
        };
      };
      Resizer.prototype = {
        init: function(){
          var B, R, s, a, b, c;
          B = this.block;
          R = this.block.range;
          if (~B.locked) {
            B.root.classList.remove('v');
          }
          s = this.rootCS;
          a = this.pads;
          a[0] = parseInt(s.getPropertyValue('padding-left'));
          a[0] += parseInt(s.getPropertyValue('padding-right'));
          a[1] = parseInt(s.getPropertyValue('padding-top'));
          a[1] += parseInt(s.getPropertyValue('padding-bottom'));
          a = this.block.rootBox.clientWidth - this.pads[0];
          b = parseFloat(R.cs.getPropertyValue('width'));
          c = parseFloat(R.cs.getPropertyValue('max-width'));
          this.baseSz[0] = a - b + c;
          this.baseSz[1] = parseFloat(s.getPropertyValue('--sm-blocks-height'));
          this.baseSz[2] = c;
          a = ~R.current
            ? R.pages[R.current]
            : R.pages[0];
          if (!(b = a.classList.contains('x'))) {
            a.classList.add('x');
          }
          c = getComputedStyle(a);
          c = parseFloat(c.getPropertyValue('min-width'));
          this.baseSz[3] = this.currentSz[2] = c;
          if (!b) {
            a.classList.remove('x');
          }
          a = getComputedStyle(!R.current
            ? R.pages[0]
            : R.pages[1]);
          b = parseFloat(a.getPropertyValue('min-width'));
          this.baseSz[4] = this.currentSz[3] = b;
          if (~B.locked) {
            B.root.classList.add('v');
          }
          this.resize();
        },
        attach: function(){
          if (this.observer) {
            this.detatch();
          }
          this.observer = new ResizeObserver(this.resize);
          this.observer.observe(this.block.root);
        },
        detach: function(){
          if (this.observer) {
            this.observer.disconnect();
            this.observer = null;
          }
        }
      };
      PageGoto = function(block){
        var a, b, c;
        this.boxFL = a = querySelectorChildren(block.rootBox, '.goto.FL');
        this.boxPN = b = querySelectorChildren(block.rootBox, '.goto.PN');
        this.btnFL = queryFirstChildren(a);
        this.btnPN = queryFirstChildren(b);
        this.sepFL = querySelectorChildren(block.rootBox, '.sep');
        if (a.length && b.length) {
          c = -1;
          while (++c < a.length) {
            a[c].classList.add('both');
            b[c].classList.add('both');
          }
        }
      };
      PageRange = function(block){
        var box, pages, gaps, i;
        this.block = block;
        this.box = box = querySelectorChild(block.rootBox, '.range');
        this.cs = getComputedStyle(box);
        this.pages = pages = querySelectorChildren(box, '.page');
        this.gaps = gaps = querySelectorChildren(box, '.gap');
        this.index = i = 1 + block.config.index;
        this.size = pages.length - 2;
        this.mode = 0;
        this.current = -1;
        this.count = 0;
        this.nPages = pages.slice().fill(0);
        this.nGaps = gaps.slice().fill(0);
        this.pFirst = -1;
        this.pLast = -1;
      };
      PageRange.prototype = {
        set: function(v){
          var pages, gaps, first, last, mode, current, count, a, b, c, i$, len$;
          pages = this.pages.slice().fill(0);
          gaps = [0, 0];
          first = -1;
          last = -1;
          if (v[1] === 0) {
            mode = 0;
            current = -1;
            count = 0;
            gaps[0] = 100;
          } else if (v[1] > pages.length) {
            mode = 1;
            current = this.index;
            count = pages.length;
            if ((a = this.index - v[0] - 1) < 0) {
              pages[0] = 1;
              first = 0;
              gaps[0] = -a - 1;
              b = -a;
              a = 0;
            } else {
              first = a + 1;
              b = -a;
            }
            while (++a < this.index) {
              pages[a] = a + b;
            }
            pages[current] = v[0] + 1;
            b = v[0] + 1;
            c = count - 1;
            if ((a = v[1] - b - this.size + this.index - 1) >= 0) {
              last = c;
              pages[c] = v[1];
              gaps[1] = a;
            } else {
              last = c + a;
              c = last + 1;
            }
            a = this.index;
            while (++a < c) {
              pages[a] = ++b;
            }
            a = 100 * gaps[0] / (gaps[0] + gaps[1]);
            if (a > 0 && a < 1) {
              a = 1;
            } else if (a > 99 && a < 100) {
              a = 99;
            } else {
              a = Math.round(a);
            }
            gaps[0] = a;
            gaps[1] = 100 - a;
          } else {
            mode = 2;
            current = v[0];
            count = pages.length;
            a = -1;
            b = 0;
            while (++a < v[1]) {
              pages[a] = ++b;
            }
            first = 0;
            last = a - 1;
          }
          if (mode !== this.mode) {
            a = this.box.classList;
            if (!this.mode) {
              a.add('v');
            }
            if (mode === 2) {
              a.add('nogap');
            } else if (!mode) {
              a.remove('v');
            }
            if (this.mode === 2) {
              a.remove('nogap');
            }
            this.mode = mode;
          }
          a = this.nPages;
          for (i$ = 0, len$ = pages.length; i$ < len$; ++i$) {
            b = i$;
            c = pages[i$];
            if (a[b] !== c) {
              if (!a[b]) {
                this.pages[b].classList.add('v');
              }
              if (!c) {
                this.pages[b].classList.remove('v');
              } else {
                this.pages[b].firstChild.textContent = ~c ? c : '';
              }
              a[b] = c;
            }
          }
          a = this.nGaps;
          for (i$ = 0, len$ = gaps.length; i$ < len$; ++i$) {
            b = i$;
            c = gaps[i$];
            if (a[b] !== c) {
              if (!a[b]) {
                this.gaps[b].classList.add('v');
              }
              if (!c) {
                this.gaps[b].classList.remove('v');
              }
              this.gaps[b].style.flexGrow = a[b] = c;
            }
          }
          if (this.current !== current) {
            if (!this.block.locked) {
              if (~this.current) {
                this.pages[this.current].classList.remove('x');
              }
              if (~current) {
                this.pages[current].classList.add('x');
              }
            }
            this.current = current;
          }
          if ((a = this.pFirst) !== first) {
            if (~a) {
              this.pages[a].classList.remove('F');
            }
            if (~first) {
              this.pages[first].classList.add('F');
            }
            this.pFirst = first;
          }
          if ((a = this.pLast) !== last) {
            if (~a) {
              this.pages[a].classList.remove('L');
            }
            if (~last) {
              this.pages[last].classList.add('L');
            }
            this.pLast = last;
          }
          if (count !== this.count) {
            this.box.style.setProperty('--count', count);
            this.count = count;
            this.block.resizer.init();
          }
        },
        focus: function(){
          var a;
          if (~this.current) {
            a = this.pages[this.current].firstChild;
            if (a !== document.activeElement) {
              a.focus();
            }
          }
        }
      };
      Block = function(state, root){
        var rootBox;
        this.state = state;
        this.root = root;
        this.rootBox = rootBox = root.firstChild;
        this.config = JSON.parse(rootBox.dataset.cfg);
        this.range = new PageRange(this);
        this.gotos = new PageGoto(this);
        this.control = new Control(this);
        this.resizer = new Resizer(this);
        this.locked = -1;
        this.current = [-1, -1];
      };
      Block.prototype = {
        group: 'page',
        level: 1,
        init: function(cfg){
          var a;
          a = this.rootBox.classList;
          if (this.config.range === 2) {
            a.add('flexy');
          }
          if (!this.gotos.sepFL) {
            a.add('nosep');
          }
          this.refresh();
          this.control.attach();
          this.resizer.attach();
          return true;
        },
        lock: async function(level){
          var current, c0, c1, a;
          current = this.locked;
          this.locked = level;
          c0 = this.root.classList;
          c1 = this.rootBox.classList;
          if (level !== current) {
            if (~level) {
              if (level) {
                if (~current) {
                  if ((a = this.control.lock).pending) {
                    (await a.spin());
                  }
                  c1.remove('v');
                  if (~(a = this.range.current)) {
                    this.range.pages[a].classList.remove('x');
                  }
                } else {
                  c0.add('v');
                }
              } else {
                c1.add('v');
                if (~(a = this.range.current)) {
                  this.range.pages[a].classList.add('x');
                }
              }
            } else {
              if (!current) {
                c1.remove('v');
              }
              c0.remove('v');
            }
          }
          return true;
        },
        notify: function(level){
          this.refresh();
          return !this.control.lock.pending;
        },
        refresh: function(){
          var a, b;
          a = this.current;
          b = this.state.data;
          if (a[0] === b[0] && a[1] === b[1]) {
            return;
          }
          if (this.range) {
            this.range.set(b);
          }
          a[0] = b[0], a[1] = b[1];
        },
        focus: function(){
          var a;
          if (!this.locked && (a = this.range) && ~a.current && (a = a.pages[a.current].firstChild) !== document.activeElement) {
            a.focus();
          }
        }
      };
      return Block;
    }(),
    'orderer': function(){
      var Control, Block;
      Control = function(block){
        var this$ = this;
        this.block = block;
        this.hovered = 0;
        this.focused = false;
        this.hover = function(e){
          e.preventDefault();
          if (!this$.block.locked && !this$.hovered) {
            this$.hovered = 1;
            this$.block.rootBox.classList.add('hovered');
          }
        };
        this.unhover = function(e){
          e.preventDefault();
          if (this$.hovered === 1) {
            this$.hovered = 0;
            this$.block.rootBox.classList.remove('hovered');
          }
        };
        this.switchVariant = function(e){
          var B, D, a, b, i$, ref$, len$;
          e.preventDefault();
          e.stopPropagation();
          B = this$.block;
          D = state.data;
          if (!B.locked && (a = B.current[1]) > 0) {
            state.data[1] = a = a === 1 ? 2 : 1;
            b = B.select.selectedIndex;
            b = B.select.options[b];
            b.value = a;
            B.select.focus();
            state.master.resolve(state);
            for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
              a = ref$[i$];
              a.refresh();
            }
          }
        };
        this.switchFocusIn = function(e){
          e.preventDefault();
          e.stopPropagation();
          if (!this$.block.locked && this$.hovered !== 2) {
            this$.hovered = 2;
            this$.block.rootBox.classList.add('hovered');
          }
        };
        this.switchFocusOut = function(e){
          e.preventDefault();
          e.stopPropagation();
          if (!this$.block.locked && this$.hovered === 2) {
            this$.hovered = 0;
            this$.block.rootBox.classList.remove('hovered');
          }
        };
        this.selected = function(e){
          var B, a, i$, ref$, len$;
          e.preventDefault();
          e.stopPropagation();
          B = this$.block;
          if (!B.locked) {
            a = B.select.selectedIndex;
            state.data[0] = B.keys[a];
            state.data[1] = +B.select.options[a].value;
            state.master.resolve(state);
            for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
              a = ref$[i$];
              a.refresh();
            }
          }
        };
      };
      Control.prototype = {
        attach: function(){
          var B, this$ = this;
          B = this.block;
          B.rootBox.addEventListener('pointerenter', this.hover);
          B.rootBox.addEventListener('pointerleave', this.unhover);
          B['switch'].forEach(function(a){
            a.addEventListener('click', this$.switchVariant);
            a.addEventListener('focusin', this$.switchFocusIn);
            a.addEventListener('focusout', this$.switchFocusOut);
          });
          B.select.addEventListener('input', this.selected);
        },
        detach: function(){
          true;
        }
      };
      Block = function(state, root){
        var a;
        this.state = state;
        this.root = root;
        this.rootBox = root.firstChild;
        this.variant = a = arrayFrom$(root.querySelectorAll('.variant'));
        this['switch'] = a.map(function(a){
          return a.firstChild;
        });
        this.select = root.querySelector('select');
        this.locked = -1;
        this.current = ['', -1];
        this.options = null;
        this.keys = null;
        this.ctrl = new Control(this);
        this.onResize = null;
      };
      Block.prototype = {
        group: 'order',
        level: 1,
        init: function(cfg){
          var s, o, k, i$, len$, a, b;
          s = this.state;
          this.options = o = cfg.locale.order;
          this.keys = k = s.config.orderOptions || Object.getOwnPropertyNames(o);
          s = this.select;
          for (i$ = 0, len$ = k.length; i$ < len$; ++i$) {
            a = k[i$];
            b = document.createElement('option');
            b.textContent = o[a][0];
            b.value = o[a][1];
            s.appendChild(b);
          }
          this.refresh();
          this.ctrl.attach();
          return true;
        },
        lock: async function(level){
          var c0, c1;
          c0 = this.root.classList;
          c1 = this.rootBox.classList;
          if (level !== this.locked) {
            if (~level) {
              if (level) {
                if (~this.locked) {
                  c1.remove('v');
                } else {
                  c0.add('v');
                }
              } else {
                c1.add('v');
              }
            } else {
              if (!this.locked) {
                c1.remove('v');
              }
              c0.remove('v');
            }
          }
          this.locked = level;
          return true;
        },
        notify: function(){
          return true;
        },
        refresh: function(){
          var a, b, c;
          a = this.state.data;
          b = this.current;
          if (a[0] !== b[0]) {
            if ((c = this.keys.indexOf(a[0])) !== this.select.selectedIndex) {
              this.select.selectedIndex = c;
            }
            if ((!a[1] && b[1]) || (a[1] && !b[1])) {
              c = !a[1];
              this['switch'].forEach(function(d){
                d.disabled = c;
              });
            }
            b[0] = a[0];
          }
          if (a[1] !== b[1]) {
            if (b[1] >= 0) {
              c = 'abc'[b[1]];
              this.variant.forEach(function(d){
                d.classList.remove(c);
              });
            }
            if (a[1] >= 0) {
              c = 'abc'[a[1]];
              this.variant.forEach(function(d){
                d.classList.add(c);
              });
            }
            b[1] = a[1];
          }
        }
      };
      return Block;
    }(),
    'view-modifier': function(){
      var template, Items, Block;
      template = parseTemplate(function(){
        /*
        <div class="limit">
        	<select></select>
        </div>
        <div class="mode">
        </div>
        <div class="size">
        </div>
        */
      });
      Items = function(block){
        var a;
        block.rootBox.innerHTML = template;
        a = block.config.ui;
        this.limit = (a & 1 && new this.limit(block)) || null;
        this.mode = (a & 2 && new this.mode(block)) || null;
        this.size = (a & 4 && new this.size(block)) || null;
        debugger;
      };
      Items.prototype = {
        limit: function(){
          var Item;
          Item = function(block){
            var box;
            this.block = block;
            this.box = box = block.rootBox.querySelector('.limit');
          };
          Item.prototype = {
            set: function(data){
              true;
            }
          };
          return Item;
        }(),
        mode: function(){
          var Item;
          Item = function(block){
            var box;
            this.block = block;
            this.box = box = block.rootBox.querySelector('.mode');
          };
          Item.prototype = {
            set: function(data){
              true;
            }
          };
          return Item;
        }(),
        size: function(){
          var Item;
          Item = function(block){
            var box;
            this.block = block;
            this.box = box = block.rootBox.querySelector('.size');
          };
          Item.prototype = {
            set: function(data){
              true;
            }
          };
          return Item;
        }()
      };
      Block = function(state, root){
        var box;
        this.state = state;
        this.root = root;
        this.rootBox = box = root.firstChild;
        this.config = JSON.parse(box.dataset.cfg);
        this.items = new Items(this);
        this.locked = -1;
      };
      Block.prototype = {
        group: 'view',
        level: 2,
        init: function(cfg){
          return true;
        },
        lock: async function(level){
          this.locked = level;
          return true;
        },
        notify: function(){
          return true;
        },
        refresh: function(){
          true;
        }
      };
      return Block;
    }()
  };
  newLoader = function(){
    var State, RequestData, Loader;
    State = function(){
      this.config = {};
      this.records = [];
      this.total = 0;
      this.page = null;
      this.category = null;
      this.price = null;
      this.order = null;
    };
    RequestData = function(){
      this.func = 'config';
      this.lang = '';
      this.category = [];
      this.price = null;
      this.order = null;
      this.offset = 0;
      this.limit = 0;
    };
    Loader = function(s){
      this['super'] = s;
      this.dirty = -1;
      this.level = -1;
      this.lock = null;
      this.fetch = null;
      this.state = null;
      this.data = null;
    };
    Loader.prototype = {
      init: async function(){
        var T, S, D, B, i$, len$, a, cfg, ref$, b;
        T = window.performance.now();
        S = new State();
        D = new RequestData();
        B = this['super'].blocks;
        for (i$ = 0, len$ = B.length; i$ < len$; ++i$) {
          a = B[i$];
          if (a.configure) {
            a.configure(D);
            import$(S.config, a.config);
          }
        }
        if ((cfg = (await soFetch(D))) instanceof Error) {
          consoleError(cfg.message);
          return false;
        }
        for (a in cfg) {
          if (S.hasOwnProperty(a)) {
            S[a] = cfg[a];
          }
        }
        for (a in D) {
          if (S.hasOwnProperty(a)) {
            D[a] = S[a];
          }
        }
        D.offset = S.page[0] * D.limit;
        D.func = 'data';
        for (i$ = 0, len$ = (ref$ = this['super'].groups).length; i$ < len$; ++i$) {
          a = ref$[i$];
          a.state.config = S.config;
          if (S.hasOwnProperty(a.name)) {
            a.state.data = S[a.name];
          }
        }
        a = [];
        for (i$ = 0, len$ = B.length; i$ < len$; ++i$) {
          b = B[i$];
          a[a.length] = b.init ? b.init(cfg) : true;
        }
        for (i$ = 0, len$ = (ref$ = (await Promise.all(a))).length; i$ < len$; ++i$) {
          b = i$;
          a = ref$[i$];
          if (!a) {
            consoleError('failed to initialize ' + B[b].group + ' block');
            return false;
          }
          B[b].lock(1);
        }
        this.state = S;
        this.data = D;
        T = window.performance.now() - T | 0;
        consoleInfo('loader initialized in ' + T + 'ms');
        return true;
      },
      finit: function(){
        if (this.lock) {
          this.lock.resolve();
        }
        if (this.fetch) {
          this.fetch.cancel();
        }
        this.dirty = -1;
        this.level = 100;
        this.lock = this.fetch = this.state = this.data = null;
      },
      charge: function(){
        var p, r, i$, ref$, len$, a;
        if (this.dirty) {
          this.lock = p = newDelay(~this.dirty && 400);
          this.dirty = 0;
        } else {
          r = null;
          p = new Promise(function(resolve){
            r = resolve;
          });
          p.pending = true;
          p.resolve = r = this.set(p, r);
          this.lock = p;
          for (i$ = 0, len$ = (ref$ = this['super'].groups).length; i$ < len$; ++i$) {
            a = ref$[i$];
            a.resolve = r;
          }
        }
        return p;
      },
      set: function(p, r){
        var loader;
        loader = this;
        return function(){
          var S, D;
          if (this.level < loader.level) {
            return false;
          }
          S = loader.state;
          D = loader.data;
          if (this.level > loader.level) {
            loader.level = this.level;
          }
          switch (this.name) {
          case 'category':
            D.offset = S.page[0] = 0;
            break;
          case 'price':
            D.offset = S.page[0] = 0;
            break;
          case 'page':
            D.offset = S.page[0] * D.limit;
          }
          console.log('group ', this.name, 'resolved clean', p.pending, 'loader dirty', loader.dirty);
          if (p.pending) {
            p.pending = false;
            r(true);
          } else if (!loader.dirty) {
            loader.dirty = 1;
            if (loader.fetch) {
              loader.fetch.cancel();
            }
          }
          return true;
        };
      },
      cycle: async function(){
        var B, a, b, R, c, d;
        if (!(await this.charge())) {
          return true;
        }
        console.log('loader charged');
        B = this['super'].blocks;
        a = [];
        b = -1;
        while (++b < B.length) {
          if (B[b].level < this.level) {
            console.log('locking ' + b.group);
            a[a.length] = B[b].lock(1);
          }
        }
        while (~--b) {
          if (B[b].level >= this.level && !B[b].notify(this.level)) {
            this.dirty = 2;
          }
        }
        if (a.length) {
          (await Promise.all(a));
        }
        if (this.dirty) {
          return true;
        }
        R = (await (this.fetch = oFetch(this.data)));
        this.fetch = null;
        if (R instanceof Error) {
          if (R.id === 4) {
            return true;
          }
          consoleError(R.message);
          return false;
        }
        if ((a = (await R.readInt())) === null) {
          consoleError('fetch stream failed');
          R.cancel();
          return false;
        }
        this.state.total = a;
        this.state.page[1] = Math.ceil(a / this.data.limit);
        a = -1;
        while (++a < B.length) {
          if ((b = B[a]).locked) {
            b.lock(0);
          }
          b.refresh(this.level);
        }
        B = this['super'].groups;
        a = -1;
        while (++a < B.length) {
          if ((b = B[a]).state.pending) {
            b.state.pending = false;
          }
        }
        this.level = 0;
        if ((B = this['super'].holders).length) {
          a = this.data.limit;
          if ((b = this.data.offset + a - this.state.total) > 0) {
            a = a - b;
          }
          b = -1;
          while (++b < a && !this.dirty) {
            if ((c = (await R.readJSON())) === null) {
              consoleError('fetch stream failed');
              R.cancel();
              return false;
            }
            d = -1;
            while (++d < B.length) {
              if (!B[d].load(c, b)) {
                consoleError('failed to load ' + B[d].group);
                return false;
              }
            }
          }
          (await R.read());
        }
        R.cancel();
        return true;
      }
    };
    return function(s){
      return new Loader(s);
    };
  }();
  newResizer = function(){
    var ResizeSlave, ResizeMaster;
    ResizeSlave = function(master, node){
      this.parent = master;
      this.node = node;
      this.blocks = null;
      this.factor = 1;
      this.emitter = null;
      this.handler = null;
    };
    ResizeMaster = function(selector, blocks){
      var s, n, i$, len$, a, b, c, j$, len1$, d, e;
      this.slaves = s = [];
      n = arrayFrom$(document.querySelectorAll(selector));
      for (i$ = 0, len$ = n.length; i$ < len$; ++i$) {
        a = n[i$];
        s[s.length] = b = new ResizeSlave(this, a);
        b.blocks = c = [];
        for (j$ = 0, len1$ = blocks.length; j$ < len1$; ++j$) {
          d = blocks[j$];
          e = d.root;
          while (e && e !== a && n.indexOf(e) === -1) {
            e = e.parentNode;
          }
          if (e === a) {
            c[c.length] = d;
          }
        }
        b.handler = e = this.handler(b);
        for (j$ = 0, len1$ = c.length; j$ < len1$; ++j$) {
          d = c[j$];
          if (d.resizer) {
            d.resizer.onChange = e;
          }
        }
      }
    };
    ResizeMaster.prototype = {
      handler: function(s){
        return function(e){
          var c;
          if (s.factor > e || s.emitter === this.block) {
            s.factor = e;
            c = '--sm-blocks-factor';
            if (e === 1) {
              s.node.style.removeProperty(c);
              s.emitter = null;
            } else {
              s.node.style.setProperty(c, e);
              s.emitter = this.block;
            }
          } else {
            e = s.factor;
          }
          return e;
        };
      }
    };
    return function(selector, blocks){
      return new ResizeMaster(selector, blocks);
    };
  }();
  newGroup = function(){
    var State, Group;
    State = function(slaves){
      this.f = slaves;
      this.config = null;
      this.data = null;
      this.pending = false;
      this.change = null;
    };
    Group = function(blocks, state){
      var this$ = this;
      this.blocks = blocks;
      this.name = blocks[0].group;
      this.level = blocks[0].level;
      this.resolve = null;
      this.state = state;
      state.change = function(data){
        console.log('state.change');
        if (arguments.length) {
          state.data = data;
        }
        state.pending = true;
        this$.resolve();
      };
    };
    return function(Master, slaves, nodes){
      var s, i;
      s = new State(slaves);
      i = -1;
      while (++i < nodes.length) {
        nodes[i] = new Master(s, nodes[i], i);
      }
      return new Group(nodes, s);
    };
  }();
  SUPERVISOR = function(m, s){
    m = m ? import$(import$({}, M), m) : M;
    s = s ? import$(import$({}, S), s) : S;
    this.masters = m;
    this.slaves = s;
    this.root = null;
    this.resizer = null;
    this.loader = null;
    this.counter = 0;
    this.groups = [];
    this.blocks = [];
    this.holders = [];
    s = (m !== M && 'custom ') || '';
    consoleInfo('new ' + s + 'supervisor');
  };
  SUPERVISOR.prototype = {
    attach: async function(root, base){
      var groups, blocks, a, ref$, b, i$, len$, loader;
      base == null && (base = '.sm-blocks');
      if (!root) {
        return false;
      } else if (this.root) {
        if (!(await this.detach())) {
          return false;
        }
        consoleInfo('re-attaching..');
      } else {
        consoleInfo('attaching..');
      }
      groups = this.groups;
      blocks = this.blocks;
      for (a in ref$ = this.masters) {
        b = ref$[a];
        if ((a = arrayFrom$(root.querySelectorAll(base + '.' + a))).length) {
          groups[groups.length] = newGroup(b, this.slaves, a);
        }
      }
      if (!groups.length) {
        return false;
      }
      for (i$ = 0, len$ = groups.length; i$ < len$; ++i$) {
        a = groups[i$];
        blocks.push.apply(blocks, a.blocks);
      }
      b = this.holders;
      for (i$ = 0, len$ = blocks.length; i$ < len$; ++i$) {
        a = blocks[i$];
        if (a.load) {
          b[b.length] = a;
        }
      }
      a = function(a, b){
        return a.level < b.level
          ? -1
          : a.level === b.level ? 0 : 1;
      };
      groups.sort(a);
      blocks.sort(a);
      this.root = root;
      this.loader = loader = newLoader(this);
      this.resizer = newResizer('.sm-blocks-resizer', blocks);
      this.counter = 0;
      if (!(await loader.init())) {
        (await this.detach());
        consoleError('attachment failed');
        return false;
      }
      consoleInfo('supervisor attached');
      while ((await loader.cycle())) {
        ++this.counter;
      }
      consoleInfo('supervisor detached, ' + this.counter + ' actions');
      return true;
    },
    detach: async function(){
      this.root = this.resizer = this.loader = null;
      this.groups.length = this.blocks.length = this.holders.length = 0;
      return true;
    }
  };
  return function(m, s){
    return new SUPERVISOR(m, s);
  };
}();
smBlocks = smBlocks();
smBlocks.attach(document);
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}