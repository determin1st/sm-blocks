// Generated by LiveScript 1.6.0
"use strict";
var smBlocks, slice$ = [].slice, arrayFrom$ = Array.from || function(x){return slice$.call(x);};
smBlocks = async function(){
  var BRAND, soFetch, newPromise, delay, querySelectorChildren, querySelectorChild, newMetaObject, BlockState, sMainSection, sCart, sGridCard, KING, mProductsGrid, mCategoryFilter, mPriceFilter, mPaginator, mOrderer;
  BRAND = 'sm-blocks';
  soFetch = httpFetch.create({
    baseUrl: '/?rest_route=/' + BRAND + '/kiss',
    mounted: true,
    notNull: true,
    method: 'POST'
  });
  newPromise = function(){
    var r, p;
    r = null;
    p = new Promise(function(resolve){
      r = resolve;
    });
    p.pending = true;
    p.resolve = function(data){
      p.pending = false;
      r(data);
    };
    p.spin = function(){
      var a;
      a = newPromise();
      p.pending = false;
      r();
      p.resolve = a.resolve;
      p.spin = a.spin;
      return a;
    };
    return p;
  };
  delay = function(ms, f){
    var p, t;
    p = newPromise();
    t = setTimeout(function(){
      p.resolve(true);
      if (f) {
        f();
      }
    }, ms);
    p.cancel = function(){
      clearTimeout(t);
      p.resolve(false);
    };
    return p;
  };
  querySelectorChildren = function(parentNode, selector){
    var a, i$, ref$, len$, b;
    a = [];
    if (!parentNode || !parentNode.children.length) {
      return a;
    }
    for (i$ = 0, len$ = (ref$ = parentNode.querySelectorAll(selector)).length; i$ < len$; ++i$) {
      b = ref$[i$];
      if (b.parentNode === parentNode) {
        a[a.length] = b;
      }
    }
    return a;
  };
  querySelectorChild = function(parentNode, selector){
    var a;
    if (!parentNode) {
      return null;
    }
    a = querySelectorChildren(parentNode, selector);
    return a.length ? a[0] : null;
  };
  newMetaObject = function(){
    var handler;
    handler = {
      get: function(o, k){
        if (o[0].hasOwnProperty(k)) {
          return o[0][k];
        }
        if (k[0] === '$') {
          k = k.slice(1);
          return k && o[0].hasOwnProperty(k) ? o[0][k] !== o[1][k] : true;
        }
        if (k[0] === '_') {
          k = k.slice(1);
          return k && o[1].hasOwnProperty(k) ? o[1][k] : null;
        }
        return null;
      },
      set: function(o, k, v){
        if (o[0].hasOwnProperty(k)) {
          o[1][k] = o[0][k];
          o[0][k] = v;
        }
        return true;
      }
    };
    return function(o){
      return new Proxy([o, import$({}, o)], handler);
    };
  }();
  BlockState = function(name, level, handler){
    this.name = name;
    this.level = level;
    this.event = handler;
    this.data = null;
    this.master = null;
    this.ready = [];
    this.pending = false;
  };
  BlockState.prototype = {
    change: function(){
      this.pending = true;
      this.master.resolve(this);
    },
    onChange: function(m){
      if (this.level < m.level) {
        this.event('lock');
        return true;
      }
      return this.event('change', m);
    },
    onLoad: function(m){
      if (this.pending) {
        this.pending = false;
      }
      return this.event('load', m);
    }
  };
  sMainSection = function(){
    var Control, Item, Block;
    Control = function(block){
      this.block = block;
    };
    Control.prototype = {
      attach: function(){
        var a, b;
        for (a in b = this.block.item) {
          b[a].attach();
        }
      },
      detach: function(){
        true;
      }
    };
    Item = function(){
      var Events, Item;
      Events = function(item){
        var block, this$ = this;
        this.item = item;
        this.hovered = false;
        this.focused = false;
        block = item.block;
        this.switchHover = function(e){
          e.preventDefault();
          if (!block.locked && !this$.hovered) {
            item.node.classList.add('hovered');
            this$.hovered = true;
          }
        };
        this.switchUnhover = function(e){
          e.preventDefault();
          if (this$.hovered) {
            item.node.classList.remove('hovered');
            this$.hovered = false;
          }
        };
        this.switchFocus = function(e){
          e.preventDefault();
          if (!block.locked && !this$.focused) {
            item.node.classList.add('focused');
            this$.focused = true;
          }
        };
        this.switchUnfocus = function(e){
          e.preventDefault();
          if (!block.locked && this$.focused) {
            item.node.classList.remove('focused');
            this$.focused = false;
          }
        };
        this['switch'] = function(e){
          e.preventDefault();
          if (!block.locked) {
            item.opened = !item.opened;
            item.node.classList.toggle('opened', item.opened);
            if (!this$.focused && item['switch']) {
              item['switch'].focus();
            }
          }
        };
      };
      return Item = function(block, node, parent){
        var box, arrow, sect, a, i$, len$, c, b;
        this.block = block;
        this.node = node;
        this.id = +node.dataset.id;
        this.order = +node.dataset.order;
        this.parent = parent;
        this.opened = node.classList.contains('opened');
        this.titleBox = box = node.firstChild;
        this.arrowBox = arrow = querySelectorChild(box, '.arrow');
        this.extraBox = querySelectorChild(box, '.extra');
        this.section = sect = querySelectorChild(node, '.section');
        this.title = box.firstChild;
        this['switch'] = arrow ? querySelectorChild(arrow, '.switch') : null;
        if ((a = querySelectorChildren(sect, '.item')).length) {
          this.children = a;
          for (i$ = 0, len$ = a.length; i$ < len$; ++i$) {
            c = i$;
            b = a[i$];
            a[c] = new Item(block, b, this);
          }
        } else {
          this.children = null;
        }
        this.events = new Events(this);
      };
    }();
    Item.prototype = {
      attach: function(){
        var B, E, a;
        B = this.block;
        E = this.events;
        if (B.mode & 4) {
          if (a = this['switch']) {
            a.addEventListener('click', E['switch']);
            a.addEventListener('pointerenter', E.switchHover);
            a.addEventListener('pointerleave', E.switchUnhover);
            a.addEventListener('focusin', E.switchFocus);
            a.addEventListener('focusout', E.switchUnfocus);
          }
          a = this.title;
          a.addEventListener('click', E['switch']);
          a.addEventListener('pointerenter', E.switchHover);
          a.addEventListener('pointerleave', E.switchUnhover);
        }
      },
      detach: function(){
        true;
      }
    };
    Block = function(root, state){
      var box, sect, item, list, a, b;
      this.root = root;
      this.rootBox = box = root.firstChild;
      this.rootItem = root = new Item(this, box, null);
      this.lines = querySelectorChildren(box, 'hr');
      sect = {};
      item = {};
      list = [root];
      a = -1;
      while (++a < list.length) {
        if ((b = list[a]).children) {
          sect[b.id] = b;
          list = list.concat(b.children);
        }
        item[b.id] = b;
      }
      this.sect = sect;
      this.item = item;
      this.list = list;
      this.mode = +box.dataset.mode;
      this.state = state;
      this.locked = 1;
      this['class'] = {};
      this.ctrl = new Control(this);
    };
    Block.prototype = {
      init: async function(){
        this.ctrl.attach();
        this.root.classList.add('v');
        return true;
      },
      lock: function(level){
        switch (level) {
        case 1:
          if (!this.locked) {
            this.rootBox.classList.remove('v');
          }
          break;
        default:
          if (this.locked) {
            this.rootBox.classList.add('v');
          }
        }
        this.locked = level;
      },
      setClass: function(k, v){
        var a;
        a = this['class'];
        if (!a.hasOwnProperty(k) || a[k] !== v) {
          a[k] = v;
          this.rootBox.classList.toggle(k, !!v);
        }
      },
      refresh: function(list){
        var i$, len$, a, b, ref$;
        for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
          a = list[i$];
          a = this.item[a];
          if (b = a.state._checked) {
            a.checkbox.classList.remove(b === 2 ? 'indeterminated' : 'checked');
          }
          if (b = a.state.checked) {
            a.checkbox.classList.add(b === 2 ? 'indeterminated' : 'checked');
          }
        }
        list = [];
        for (a in ref$ = this.item) {
          b = ref$[a];
          a = b.id;
          b = b.state;
          if (b.checked === 1 && b.count > 0) {
            list[list.length] = a;
          }
        }
        b = state.data[this.index][1];
        if (b.length === list.length) {
          a = list.every(function(a){
            return b.indexOf(a) !== -1;
          });
          if (a) {
            return;
          }
        }
        state.data[this.index][1] = list;
        state.change();
      },
      finit: function(){
        this.root.classList.remove('v');
        this.ctrl.detach();
      }
    };
    return function(node, state){
      return new Block(node, state);
    };
  }();
  sCart = function(){
    var data;
    data = null;
    return {
      add: async function(id){
        var a;
        a = (await soFetch({
          func: 'cart',
          op: 'set',
          id: id
        }));
        if (a instanceof Error) {
          return false;
        }
        a = wc_add_to_cart_params.wc_ajax_url.replace('%%endpoint%%', 'get_refreshed_fragments');
        a = (await httpFetch({
          url: a,
          notNull: true
        }));
        if (a instanceof Error) {
          return true;
        }
        jQuery(document.body).trigger('added_to_cart', [a.fragments, a.cart_hash, null]);
        return true;
      },
      get: function(id){
        var a, ref$, b;
        if (!data) {
          return null;
        }
        for (a in ref$ = data) {
          b = ref$[a];
          if (b.product_id === id) {
            return b;
          }
        }
        return null;
      },
      load: async function(){
        var a;
        a = (await soFetch({
          func: 'cart',
          op: 'get'
        }));
        if (a instanceof Error) {
          return null;
        }
        return data = a;
      }
    };
  }();
  sGridCard = function(){
    return null;
  }();
  KING = function(){
    var root, grid, gridList, gridControl, gridState, gridLock, gridResizer, gridLoader, Box, Data, newImageBlock, newTitleBlock, newPriceBlock, newControlBlock, newItem;
    if (!(root = document.querySelector('.sm-blocks.grid'))) {
      return null;
    }
    grid = root.firstChild;
    gridList = arrayFrom$(grid.children);
    gridControl = [];
    gridState = {
      dirty: false,
      level: 100,
      config: {},
      orderOption: null,
      total: 0,
      count: 0,
      pageCount: 0,
      pageIndex: 0,
      orderFilter: ['', 0],
      priceFilter: [false, -1, -1, -1, -1]
    };
    gridLock = async function(){
      var a, b, c, d, e;
      a = sCart.load();
      b = soFetch({
        func: 'config',
        lang: '',
        category: null
      });
      c = gridState.config;
      d = (await Promise.all([a, b]));
      import$(c, d[1]);
      a = grid.dataset.order.split(',');
      if (b = a.length) {
        gridState.orderOption = d = {};
        e = -1;
        while (++e < b) {
          d[a[e]] = c.locale.order[a[e]];
        }
        b = parseInt(grid.dataset.index);
        b = a[b];
        gridState.orderFilter[0] = b;
        gridState.orderFilter[1] = c.locale.order[b][1];
      }
      if (a = c.priceRange) {
        gridState.priceFilter[3] = a[0];
        gridState.priceFilter[4] = a[1];
      }
      gridState.total = a = c.total;
      gridState.pageCount = Math.ceil(a / gridList.length);
      return true;
    }();
    gridResizer = function(){
      var style, state, f;
      style = getComputedStyle(grid);
      state = {
        columnsMax: +style.getPropertyValue('--columns'),
        columnsMin: +grid.dataset.cols,
        columnGap: parseInt(style.getPropertyValue('--column-gap')),
        rowsMin: +style.getPropertyValue('--rows'),
        rowsMax: 0,
        rowGap: parseInt(style.getPropertyValue('--row-gap')),
        itemX: parseInt(style.getPropertyValue('--item-max-x')),
        itemXA: 0,
        itemY: parseInt(style.getPropertyValue('--item-max-y')),
        itemYA: 0,
        fontSizeMax: parseInt(style.getPropertyValue('--font-size')),
        ratio: 0,
        width: 0,
        fontSize: 0,
        columns: 0,
        rows: 0
      };
      state.ratio = state.itemY / state.itemX;
      state.rowsMax = Math.ceil(gridList.length / state.columnsMin);
      state.itemXA = state.itemX + state.columnGap / 2;
      state.itemYA = state.itemY + state.rowGap / 2;
      f = function(e){
        var x, a, w, i$, ref$, len$, c;
        x = e
          ? e[0].contentRect.width
          : root.clientWidth;
        if (state.columnsMin === state.columnsMax) {
          state.columns = state.columnsMax;
          state.rows = state.rowsMin;
        } else {
          if ((a = x / state.itemXA | 0) > state.columnsMax) {
            state.columns = state.columnsMax;
            state.rows = state.rowsMin;
          } else if (a < state.columnsMin) {
            state.columns = state.columnsMin;
            state.rows = state.rowsMax;
          } else {
            state.columns = a;
            state.rows = Math.ceil(gridList.length / a);
          }
        }
        a = state.columns;
        w = a === 1
          ? state.itemX
          : state.itemX * a + state.columnGap * (a - 1);
        if (w <= x) {
          a = state.rows;
          state.width = w;
          state.height = a === 1
            ? state.itemY
            : state.itemY * a + state.rowGap * (a - 1);
          state.fontSize = state.fontSizeMax;
        } else {
          a = x / w;
          state.width = x;
          state.height = state.rows * state.itemYA * a;
          state.fontSize = state.fontSizeMax * a;
        }
        grid.style.setProperty('--columns', state.columns);
        grid.style.setProperty('--rows', state.rows);
        grid.style.setProperty('--height', state.height + 'px');
        grid.style.setProperty('--font-size', state.fontSize + 'px');
        for (i$ = 0, len$ = (ref$ = gridControl).length; i$ < len$; ++i$) {
          c = ref$[i$];
          c.event('resize', state);
        }
      };
      new ResizeObserver(f).observe(root, {
        box: 'border-box'
      });
      return f;
    }();
    gridLoader = function(){
      var cooldown, iFetch, res, req, setState, clearState, unloadItems, newMasterPromise;
      cooldown = 800;
      iFetch = httpFetch.create({
        baseUrl: '/?rest_route=/' + BRAND + '/kiss',
        mounted: true,
        notNull: true,
        method: 'POST',
        timeout: 0,
        parseResponse: 'stream'
      });
      res = null;
      req = {
        func: 'grid',
        limit: gridList.length,
        offset: 0,
        category: null,
        order: gridState.orderFilter,
        price: gridState.priceFilter
      };
      setState = function(s){
        var a, b, i$, ref$, len$, c, j$, ref1$, len1$, d;
        if (gridState.level > s.level) {
          return false;
        }
        if (gridState.level < s.level) {
          gridState.level = s.level;
        }
        switch (s.name) {
        case 'category':
          a = [];
          b = [];
          for (i$ = 0, len$ = (ref$ = s.data).length; i$ < len$; ++i$) {
            c = ref$[i$];
            switch (c[0]) {
            case 'AND':
              if (c[1].length) {
                a[a.length] = c[1];
              }
              break;
            case 'OR':
              for (j$ = 0, len1$ = (ref1$ = c[1]).length; j$ < len1$; ++j$) {
                d = ref1$[j$];
                if (b.indexOf(d) === -1) {
                  b[b.length] = d;
                }
              }
            }
          }
          if (b.length) {
            a[a.length] = b;
          }
          req.category = a.length ? a : null;
          req.offset = gridState.pageIndex = 0;
          break;
        case 'page':
          gridState.pageIndex = s.data[0];
          req.offset = gridState.pageIndex * req.limit;
          break;
        case 'order':
          gridState.orderFilter[0] = s.data[0];
          gridState.orderFilter[1] = s.data[1];
        }
        return true;
      };
      clearState = function(){
        true;
      };
      unloadItems = function(){
        var c;
        if (c = gridState.count) {
          while (--c >= 0) {
            gridList[c].cls();
          }
          gridState.count = 0;
        }
      };
      newMasterPromise = function(){
        var r, p;
        r = null;
        p = new Promise(function(resolve){
          r = resolve;
        });
        p.pending = true;
        p.resolve = function(data){
          if (data && !setState(data)) {
            return;
          }
          if (p.pending) {
            p.pending = false;
            r();
          } else if (!gridState.dirty) {
            gridState.dirty = true;
            if (res) {
              res.cancel();
            }
          }
        };
        return p;
      };
      return async function(){
        var i$, ref$, len$, c, a, b;
        if (gridState.dirty) {
          gridState.dirty = false;
          gridLock = delay(cooldown);
        } else if (!gridLock) {
          gridLock = newMasterPromise();
          for (i$ = 0, len$ = (ref$ = gridControl).length; i$ < len$; ++i$) {
            c = ref$[i$];
            c.master = gridLock;
          }
        }
        (await gridLock);
        unloadItems();
        if (gridState.dirty) {
          return true;
        }
        for (i$ = 0, len$ = (ref$ = gridControl).length; i$ < len$; ++i$) {
          c = ref$[i$];
          if (!c.onChange(gridState)) {
            return true;
          }
        }
        a = (await (res = iFetch(req)));
        res = null;
        if (a instanceof Error) {
          return a.id === 4 ? true : false;
        }
        if ((b = (await a.readInt())) === null || gridState.dirty) {
          a.cancel();
          return gridState.dirty;
        }
        gridState.total = b;
        gridState.count = (c = b - req.offset) < gridList.length
          ? c
          : gridList.length;
        gridState.pageCount = Math.ceil(b / gridList.length);
        for (i$ = 0, len$ = (ref$ = gridControl).length; i$ < len$; ++i$) {
          c = ref$[i$];
          c.onLoad(gridState);
        }
        gridState.level = 0;
        c = -1;
        while (++c < gridState.count && !gridState.dirty) {
          if ((b = (await a.readJSON())) === null) {
            a.cancel();
            return false;
          }
          gridList[c].set(b);
        }
        if (c !== gridState.count) {
          gridState.count = c;
        } else {
          (await a.read());
        }
        a.cancel();
        return true;
      };
    }();
    Box = function(node){
      this.box = node;
      this.data = null;
      this.set = null;
      this.cls = null;
    };
    Data = function(box, value){
      this.box = box;
      this.container = box.children[0];
      this.placeholder = box.children[1];
      this.value = value;
      this.config = null;
    };
    Data.prototype = {
      loaded: function(){
        this.box.classList.add('loaded');
      },
      unloaded: function(){
        this.box.classList.remove('loaded');
      }
    };
    newImageBlock = function(){
      var loaded, set, cls;
      loaded = function(block){
        return function(){
          var img;
          img = block.data.value;
          if (img.complete && img.naturalWidth !== 0) {
            block.data.loaded();
          }
        };
      };
      set = function(data){
        var img, a, b;
        if (data = data.image) {
          img = this.data.value;
          for (a in data) {
            b = data[a];
            img[a] = b;
          }
        }
      };
      cls = function(){
        var a;
        a = this.data.value;
        a.srcset = a.src = '';
        this.data.unloaded();
      };
      return function(node){
        var a, img;
        a = new Box(node);
        img = node.querySelector('img');
        img.addEventListener('load', loaded(a));
        a.data = new Data(node, img);
        a.set = set;
        a.cls = cls;
        return a;
      };
    }();
    newTitleBlock = function(){
      var set, cls;
      set = function(data){
        var a;
        a = data.name.replace(/\s+([\\\|/.]){1}\s+/, "\n");
        this.data.container.innerText = a;
        this.data.loaded();
      };
      cls = function(){
        this.data.container.innerText = '';
        this.data.unloaded();
      };
      return function(node){
        var a;
        a = new Box(node);
        a.data = new Data(node, null);
        a.set = set;
        a.cls = cls;
        return a;
      };
    }();
    newPriceBlock = function(){
      var map, expThousandSplit, expValueSplit, set, cls;
      map = ['.currency', '.dot', '.r0', '.r1', '.c0', '.c1'];
      expThousandSplit = /\B(?=(\d{3})+(?!\d))/;
      expValueSplit = /[^0-9]/;
      set = function(data){
        var v, c, d, a, b, i$, ref$, len$, i, n;
        v = this.data.value;
        c = gridState.config.currency;
        if (d = data.price) {
          a = d[0].split(expValueSplit, 2);
          b = d[1].split(expValueSplit, 2);
          a[1] = a[1]
            ? a[1].substring(0, c[3]).padEnd(c[3], '0')
            : '0'.repeat(c[3]);
          b[1] = b[1]
            ? b[1].substring(0, c[3]).padEnd(c[3], '0')
            : '0'.repeat(c[3]);
          if (c[2]) {
            a[0] = a[0].replace(expThousandSplit, c[2]);
            b[0] = b[0].replace(expThousandSplit, c[2]);
          }
          c = [c[0], c[1], a[0], a[1], b[0], b[1]];
          for (i$ = 0, len$ = (ref$ = this.data.value).length; i$ < len$; ++i$) {
            i = i$;
            n = ref$[i$];
            if (n) {
              n.forEach(fn$);
            }
          }
          c = a[0] + '.' + a[1];
          d = b[0] + '.' + b[1];
          if (c !== d) {
            this.data.container.classList.add(c > d ? 'lower' : 'higher');
          }
          if (gridState.config.currency[4]) {
            this.data.container.classList.add('right');
          }
        } else {
          this.data.container.classList.add('none');
        }
        this.data.loaded();
        function fn$(n){
          n.textContent = c[i];
        }
      };
      cls = function(){
        var i$, ref$, len$, i, n;
        for (i$ = 0, len$ = (ref$ = this.data.value).length; i$ < len$; ++i$) {
          i = i$;
          n = ref$[i$];
          if (n) {
            n.forEach(fn$);
          }
        }
        this.data.unloaded();
        function fn$(n){
          n.textContent = '';
        }
      };
      return function(node){
        var a, e;
        a = new Box(node);
        e = map.map(function(e){
          e = arrayFrom$(node.querySelectorAll(e));
          return e.length ? e : null;
        });
        if (e.every(function(e){
          return e === null;
        })) {
          e = null;
        }
        a.data = new Data(node, e);
        a.set = set;
        a.cls = cls;
        return a;
      };
    }();
    newControlBlock = function(){
      var map, set, cls;
      map = ['.link', '.cart'];
      set = function(data){
        var c, e, s;
        c = this.data.config = [];
        e = this.data.value;
        s = data.stock;
        e[0] && e[0].forEach(function(e){
          e.href = data.link;
        });
        e[1] && e[1].forEach(function(e, i){
          var x, f;
          if (s.status !== 'instock') {
            e.classList.add('none');
            return;
          }
          x = sCart.get(data.id);
          if (s.count === 0 || (x && s.count <= x.quantity)) {
            e.disabled = true;
          }
          c[i] = f = async function(a){
            var x;
            a.preventDefault();
            e.disabled = true;
            if (!(a = (await sCart.add(data.id)))) {
              return;
            }
            if (!(await sCart.load())) {
              return;
            }
            x = sCart.get(data.id);
            if (!x || s.count <= x.quantity) {
              return;
            }
            e.disabled = false;
          };
          e.addEventListener('click', f);
        });
        this.data.loaded();
      };
      cls = function(){
        var c, e;
        c = this.data.config;
        e = this.data.value;
        e[0] && e[0].forEach(function(e){
          e.href = '';
        });
        e[1] && e[1].forEach(function(e, i){
          e.removeEventListener('click', c[i]);
          e.disabled = false;
          e.classList.remove('none');
        });
        this.data.unloaded();
      };
      return function(node){
        var a, e;
        a = new Box(node);
        e = map.map(function(e){
          e = arrayFrom$(node.querySelectorAll(e));
          return e.length ? e : null;
        });
        a.data = new Data(node, e);
        a.set = set;
        a.cls = cls;
        return a;
      };
    }();
    newItem = function(){
      var map, Item;
      map = {
        name: ['.title', newTitleBlock],
        image: ['.head', newImageBlock],
        price: ['.price', newPriceBlock],
        controls: ['.controls', newControlBlock]
      };
      Item = function(node){
        this.node = node;
        this.id = 0;
        this.name = null;
        this.image = null;
        this.icon = null;
        this.features = null;
        this.price = null;
        this.controls = null;
      };
      Item.prototype = {
        set: function(data){
          var a;
          this.id = data.id;
          for (a in map) {
            if (this[a]) {
              this[a].set(data);
            }
          }
          this.node.classList.remove('empty');
        },
        cls: function(){
          var a;
          for (a in map) {
            if (this[a]) {
              this[a].cls();
            }
          }
          this.node.classList.add('empty');
        }
      };
      return function(node){
        var a, b, ref$, c, d;
        a = new Item(node);
        for (b in ref$ = map) {
          c = ref$[b];
          if (d = node.querySelector(c[0])) {
            a[b] = c[1](d);
          }
        }
        return a;
      };
    }();
    return {
      resize: gridResizer,
      rule: async function(c){
        var i$, ref$, len$, b, a;
        if (!grid.classList.contains('v')) {
          for (i$ = 0, len$ = (ref$ = gridList).length; i$ < len$; ++i$) {
            b = i$;
            a = ref$[i$];
            gridList[b] = newItem(a);
          }
          gridResizer();
          root.classList.add('v');
        }
        a = [gridLock];
        for (i$ = 0, len$ = c.length; i$ < len$; ++i$) {
          b = c[i$];
          if (b) {
            a = a.concat(b.ready);
          }
        }
        (await Promise.all(a));
        for (i$ = 0, len$ = c.length; i$ < len$; ++i$) {
          a = c[i$];
          if (a) {
            gridControl[gridControl.length] = a;
            a.event('init', gridState);
          }
        }
        if ((await gridLoader())) {
          grid.classList.add('v');
          gridLock = null;
          while ((await gridLoader())) {
            gridLock = null;
          }
        }
        console.log('FATAL ERROR?');
        return true;
      }
    };
  }();
  mProductsGrid = function(){
    var Block, State, state;
    Block = function(root){
      this.root = root;
      this.rootBox = root.firstChild;
      this.state = new State(this);
    };
    State = function(block){
      this.block = block;
      this.lock = null;
      this.dirty = false;
      this.level = 0;
      this.total = 0;
      this.count = 0;
      this.pageCount = 0;
      this.pageIndex = 0;
      this.orderOption = null;
      this.orderFilter = ['', 0];
    };
    state = new BlockState('grid', 0, function(event, data){
      return true;
    });
    return state;
  }();
  mCategoryFilter = function(){
    var Item, ItemState, ItemEvents, Block, state, blocks;
    Item = function(block, node){
      var name;
      this.block = block;
      this.node = node;
      this.id = +node.dataset.id;
      this.parent = null;
      this.children = null;
      this.name = name = node.children[0];
      this.nameBox = name.querySelector('.box');
      this.input = name.querySelector('.box > input');
      this.checkbox = name.querySelector('.box > .check');
      this.count = name.querySelector('.count');
      this.arrow = name.querySelector('.arrow');
      this.sect = node.children[1] ? node.children[1] : null;
      this.state = newMetaObject(new ItemState(this));
      this.events = new ItemEvents(this);
    };
    Item.prototype = {
      toggleCheckbox: function(){
        var setChildren, setParent;
        setChildren = function(items, checked){
          var list, i$, len$, a;
          list = [];
          for (i$ = 0, len$ = items.length; i$ < len$; ++i$) {
            a = items[i$];
            if (a.state.checked !== checked) {
              a.state.checked = checked;
              list[list.length] = a.id;
              if (a.children) {
                list = list.concat(setChildren(a.children, checked));
              }
            }
          }
          return list;
        };
        setParent = function(item, checked){
          var a, i$, ref$, len$, b;
          if (checked === 2) {
            a = 2;
          } else {
            a = checked;
            for (i$ = 0, len$ = (ref$ = item.children).length; i$ < len$; ++i$) {
              b = ref$[i$];
              if (b.state.checked !== a) {
                a = 2;
                break;
              }
            }
          }
          if (item.state.checked === a) {
            b = [];
          } else {
            item.state.checked = a;
            b = [item.id];
          }
          return item.parent ? setParent(item.parent, a).concat(b) : b;
        };
        return function(){
          var s, list;
          s = this.state;
          s.checked = s.checked === 2
            ? 1
            : s.checked ? 0 : 1;
          list = [this.id];
          if (this.parent) {
            list = list.concat(setParent(this.parent, s.checked));
          }
          if (this.children) {
            list = list.concat(setChildren(this.children, s.checked));
          }
          this.block.refresh(list);
        };
      }()
    };
    ItemState = function(item){
      this.checked = 0;
      this.opened = item.sect ? item.sect.classList.contains('opened') : false;
      this.count = +item.node.dataset.count;
      this.order = +item.node.dataset.order;
    };
    ItemEvents = function(item){
      this.item = item;
      this.toggleSection = function(e){
        var s;
        e.preventDefault();
        e.stopPropagation();
        s = item.state;
        s.opened = !s.opened;
        item.sect.classList.toggle('opened', s.opened);
        item.arrow.classList.toggle('opened', s.opened);
        item.input.focus();
      };
      this.toggleCheckbox = function(e){
        e.preventDefault();
        e.stopPropagation();
        item.toggleCheckbox();
        item.input.focus();
      };
    };
    ItemEvents.prototype = {
      attach: function(){
        var item;
        if ((item = this.item).sect) {
          item.arrow.addEventListener('click', this.toggleSection);
        }
        item.nameBox.addEventListener('click', this.toggleCheckbox, true);
      },
      detach: function(){
        var item;
        if ((item = this.item).sect) {
          item.arrow.removeEventListener('click', this.toggleSection);
        }
        item.nameBox.removeEventListener('click', this.toggleCheckbox, true);
      }
    };
    Block = function(root){
      var rootBox, item, sect, list, i$, len$, a, b, c, ref$, d;
      this.root = root;
      this.rootBox = rootBox = root.firstChild;
      this.op = rootBox.dataset.op;
      this.index = 0;
      this.item = item = {};
      this.sect = sect = {};
      this.locked = true;
      list = arrayFrom$(root.querySelectorAll('.item'));
      for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
        a = list[i$];
        b = new Item(this, a);
        item[b.id] = b;
        if (b.sect) {
          sect[b.id] = b;
        }
      }
      for (a in sect) {
        b = sect[a];
        b.children = c = [];
        for (i$ = 0, len$ = (ref$ = b.sect.children).length; i$ < len$; ++i$) {
          a = ref$[i$];
          d = item[a.dataset.id];
          d.parent = b;
          c[c.length] = item[a.dataset.id];
        }
      }
      for (a in item) {
        a = item[a];
        a.events.attach();
      }
      root.classList.add('v');
    };
    Block.prototype = {
      init: function(index){
        this.index = index;
        state.data[index] = [this.op, []];
      },
      refresh: function(list){
        var i$, len$, a, b, ref$;
        for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
          a = list[i$];
          a = this.item[a];
          if (b = a.state._checked) {
            a.checkbox.classList.remove(b === 2 ? 'indeterminated' : 'checked');
          }
          if (b = a.state.checked) {
            a.checkbox.classList.add(b === 2 ? 'indeterminated' : 'checked');
          }
        }
        list = [];
        for (a in ref$ = this.item) {
          b = ref$[a];
          a = b.id;
          b = b.state;
          if (b.checked === 1 && b.count > 0) {
            list[list.length] = a;
          }
        }
        b = state.data[this.index][1];
        if (b.length === list.length) {
          a = list.every(function(a){
            return b.indexOf(a) !== -1;
          });
          if (a) {
            return;
          }
        }
        state.data[this.index][1] = list;
        state.change();
      },
      unlock: function(){
        this.rootBox.classList.add('v');
        this.locked = false;
      }
    };
    state = new BlockState('category', 2, function(event, data){
      var i$, ref$, len$, b, a;
      switch (event) {
      case 'init':
        for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
          b = i$;
          a = ref$[i$];
          a.init(b);
        }
        break;
      case 'load':
        for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
          a = ref$[i$];
          if (a.locked) {
            a.unlock();
          }
        }
      }
      return true;
    });
    state.data = [];
    blocks = arrayFrom$(document.querySelectorAll('.sm-blocks.category-filter'));
    blocks = blocks.map(function(root){
      return new Block(root);
    });
    return state;
  }();
  mPriceFilter = function(){
    var TextInputs, Block, state, blocks;
    TextInputs = function(block){
      var a, b, c, this$ = this;
      this.block = block;
      a = block.rootBox;
      b = a.children[0];
      c = a.children[2];
      this.boxes = [b, c];
      this.svg = a.children[1];
      this.resetBtn = querySelectorChild(this.svg, '.state');
      this.input = [b.children[0], c.children[0]];
      this.label = [b.children[1], c.children[1]];
      this.rootHover = function(e){
        e.preventDefault();
        if (!block.locked && !this$.hovered[3]) {
          this$.hovered[3] = true;
          block.rootBox.classList.add('hovered');
        }
      };
      this.rootUnhover = function(e){
        e.preventDefault();
        if (this$.hovered[3]) {
          this$.hovered[3] = false;
          block.rootBox.classList.remove('hovered');
        }
      };
      this.boxHovers = [this.boxHover(0), this.boxUnhover(0), this.boxHover(1), this.boxUnhover(1)];
      this.inputFocus = [this.inputFocusIn(0), this.inputFocusOut(0), this.inputFocusIn(1), this.inputFocusOut(1)];
      this.labelClicks = [this.labelClick(0), this.labelClick(1)];
      this.inputEvents = [this.inputChange(0), this.inputChange(1), this.inputKey(0), this.inputKey(1)];
      this.inputWheels = [this.inputWheel(0), this.inputWheel(1), this.inputWheel(-1)];
      this.reset = function(e){
        var c;
        if (this$.block.locked) {
          return;
        }
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        if ((c = this$.block.current)[0]) {
          c[0] = false;
          c[1] = c[2] = -1;
          this$.set(c[3], c[4]);
          this$.submit();
        }
      };
      this.hovered = [false, false, false];
      this.focused = [false, false, false];
      this.values = ['', '', 0, 0, 0, 0];
      this.changed = 0;
      this.locked = 1;
      this.regex = /^[0-9]{0,9}$/;
      this.stepSz = 10 / 100;
      this.waiter = delay(0);
    };
    TextInputs.prototype = {
      init: function(cfg){
        this.label[0].textContent = cfg.min;
        this.label[1].textContent = cfg.max;
      },
      attach: function(){
        var B, a, b;
        B = this.block;
        B.rootBox.addEventListener('pointerenter', this.rootHover);
        B.rootBox.addEventListener('pointerleave', this.rootUnhover);
        a = this.boxHovers;
        b = this.boxes;
        b[0].addEventListener('pointerenter', a[0]);
        b[0].addEventListener('pointerleave', a[1]);
        b[1].addEventListener('pointerenter', a[2]);
        b[1].addEventListener('pointerleave', a[3]);
        a = this.inputFocus;
        b = this.input;
        b[0].addEventListener('focusin', a[0]);
        b[0].addEventListener('focusout', a[1]);
        b[1].addEventListener('focusin', a[2]);
        b[1].addEventListener('focusout', a[3]);
        a = this.label;
        b = this.labelClicks;
        a[0].addEventListener('pointerdown', b[0], true);
        a[1].addEventListener('pointerdown', b[1], true);
        a = this.inputEvents;
        b = this.input;
        b[0].addEventListener('input', a[0], true);
        b[1].addEventListener('input', a[1], true);
        b[0].addEventListener('keydown', a[2], true);
        b[1].addEventListener('keydown', a[3], true);
        a = this.inputWheels;
        b = this.boxes;
        b[0].addEventListener('wheel', a[0]);
        b[1].addEventListener('wheel', a[1]);
        this.svg.addEventListener('wheel', a[2]);
        if (a = this.resetBtn) {
          a.addEventListener('click', this.reset);
        }
      },
      detach: function(){},
      set: function(min, max){
        var v;
        v = this.values;
        v[0] = this.input[0].value = '' + min;
        v[1] = this.input[1].value = '' + max;
        v[2] = v[3] = 0;
        v[4] = v[0].length;
        v[5] = v[1].length;
      },
      check: function(n){
        var a, b, c, d;
        a = +this.input[0].value;
        b = +this.input[1].value;
        c = this.block.current;
        d = true;
        if (a > b) {
          d = a;
          a = b;
          b = d;
          d = false;
        } else if (a === b) {
          if (n) {
            if ((a = c[3]) === b) {
              ++b;
            }
          } else {
            if ((b = c[4]) === a) {
              --a;
            }
          }
          d = false;
        }
        if (a >= c[4] || a < c[3]) {
          d = false;
          a = c[0]
            ? c[1]
            : c[3];
        } else if (a < c[3]) {
          d = false;
          a = c[3];
        }
        if (b <= c[3]) {
          d = false;
          b = c[0]
            ? c[2]
            : c[4];
        } else if (b > c[4]) {
          d = false;
          b = c[4];
        }
        if (!d) {
          this.set(a, b);
        }
        if (a === c[3] && b === c[4]) {
          if (c[0]) {
            ++this.changed;
          }
          c[0] = false;
          c[1] = c[2] = -1;
        } else {
          if (!c[0] || (a !== c[1] || b !== c[2])) {
            ++this.changed;
          }
          c[0] = true;
          c[1] = a;
          c[2] = b;
        }
        return d;
      },
      submit: function(){
        this.changed = 0;
        this.block.submit();
      },
      lock: function(level){
        var I, B, F;
        I = this.input;
        B = this.boxes;
        F = this.focused;
        switch (level) {
        case 1:
          if (!this.locked) {
            I[0].readOnly = true;
            I[1].readOnly = true;
            B[0].classList.add('locked');
            B[1].classList.add('locked');
            if (F[2]) {
              if (F[1]) {
                I[1].setSelectionRange(0, 0);
              } else {
                I[0].setSelectionRange(0, 0);
              }
            }
          }
          break;
        default:
          if (this.locked) {
            I[0].readOnly = false;
            I[1].readOnly = false;
            B[0].classList.remove('locked');
            B[1].classList.remove('locked');
            if (F[2]) {
              if (F[1]) {
                I[1].select();
              } else {
                I[0].select();
              }
            }
          }
        }
        this.locked = level;
      },
      inputScroll: function(n, direction){
        var c, a, d, b;
        c = this.block.current;
        a = c[4] > 100 ? 0.01 : 0.1;
        d = c[4] - c[3];
        b = (+this.values[n] - c[3]) / d;
        if (direction) {
          b += 1.5 * a;
        } else {
          b -= 0.5 * a;
        }
        b = a * (b / a | 0);
        a = c[3] + b * d | 0;
        if (n) {
          b = a;
          a = +this.values[0];
          if (b >= c[4]) {
            b = c[4];
          } else if (b <= a) {
            b = a + 1;
          }
        } else {
          b = +this.values[1];
          if (a <= c[3]) {
            a = c[3];
          } else if (a >= b) {
            a = b - 1;
          }
        }
        this.set(a, b);
      },
      boxHover: function(n){
        var this$ = this;
        return function(e){
          var B, H;
          e.preventDefault();
          e.stopPropagation();
          if (!(B = this$.block).locked) {
            H = this$.hovered;
            H[n] = true;
            if (!H[2]) {
              H[2] = true;
              B.rootBox.classList.add('hovered');
            }
            B.rootBox.classList.add(n ? 'R' : 'L');
            this$.boxes[n].classList.add('hovered');
          }
        };
      },
      boxUnhover: function(n){
        var this$ = this;
        return function(e){
          var H, B;
          e.preventDefault();
          if ((H = this$.hovered)[n]) {
            B = this$.block;
            H[n] = false;
            if (!this$.focused[n]) {
              B.rootBox.classList.remove(n ? 'R' : 'L');
            }
            this$.boxes[n].classList.remove('hovered');
          }
        };
      },
      inputFocusIn: function(n){
        var this$ = this;
        return function(e){
          var B, H, F;
          if ((B = this$.block).locked) {
            e.preventDefault();
            e.stopPropagation();
          } else {
            H = this$.hovered;
            F = this$.focused;
            F[n] = true;
            if (!F[2]) {
              F[2] = true;
              B.rootBox.classList.add('focused');
            }
            if (!H[n]) {
              B.rootBox.classList.add(n ? 'R' : 'L');
            }
            this$.input[n].select();
            this$.boxes[n].classList.add('focused');
          }
        };
      },
      inputFocusOut: function(n){
        var this$ = this;
        return function(e){
          var B, F;
          B = this$.block;
          F = this$.focused;
          F[n] = false;
          F[2] = false;
          B.rootBox.classList.remove('focused');
          if (!this$.hovered[n]) {
            B.rootBox.classList.remove(n ? 'R' : 'L');
          }
          this$.boxes[n].classList.remove('focused');
          this$.check(n);
          if (this$.changed) {
            this$.submit();
          }
        };
      },
      labelClick: function(n){
        var this$ = this;
        return function(e){
          var a;
          if (this$.block.locked || !this$.focused[n]) {
            return;
          }
          e.preventDefault();
          e.stopPropagation();
          a = '' + this$.block.current[3 + n];
          e = this$.values;
          if (e[n] !== a) {
            e[n] = this$.input[n].value = a;
            e[2 + n] = 0;
            e[4 + n] = a.length;
            this$.check(n);
            if (this$.changed) {
              this$.submit();
            }
          }
          this$.input[n].select();
        };
      },
      inputChange: function(n){
        var this$ = this;
        return function(e){
          var v, a, b, c;
          v = this$.values;
          a = this$.input[n];
          b = a.value;
          if (b.length) {
            if (!this$.regex.test(b)) {
              a.value = v[n];
              a.setSelectionRange(v[2 + n], v[4 + n]);
            } else {
              v[n] = b;
              v[2 + n] = a.selectionStart;
              v[4 + n] = a.selectionEnd;
              return true;
            }
          } else {
            c = this$.block.current;
            if ((b = c[3 + n]) >= 0 || (b = c[1 + n]) >= 0) {
              v[n] = a.value = "" + b;
              v[2 + n] = 0;
              v[4 + n] = v[n].length;
              a.select();
            }
          }
          e.preventDefault();
          e.stopPropagation();
          return false;
        };
      },
      inputKey: function(n){
        var this$ = this;
        return function(e){
          var ref$;
          if (this$.block.locked) {
            return;
          }
          if (e.keyCode === 13) {
            e.preventDefault();
            e.stopPropagation();
            if (e.ctrlKey) {
              this$.check(n);
              if (this$.changed) {
                this$.submit();
              }
            } else {
              if (this$.check(n) && this$.changed) {
                this$.submit();
              }
              this$.input[n ^ 1].focus();
            }
          } else if ((ref$ = e.keyCode) === 38 || ref$ === 40) {
            e.preventDefault();
            e.stopPropagation();
            this$.inputScroll(n, e.keyCode === 38);
            this$.input[n].select();
          }
        };
      },
      inputWheel: function(n){
        var this$ = this;
        return async function(e){
          if (this$.block.locked) {
            return;
          }
          e.preventDefault();
          e.stopPropagation();
          this$.waiter.cancel();
          if (n < 0) {
            e = e.deltaY < 0;
            this$.inputScroll(0, !e);
            this$.inputScroll(1, e);
          } else {
            this$.inputScroll(n, e.deltaY < 0);
            if (this$.focused[n]) {
              this$.input[n].select();
            }
          }
          if ((await (this$.waiter = delay(400)))) {
            this$.check(n);
            if (this$.changed) {
              this$.submit();
            }
          }
          return true;
        };
      }
    };
    Block = function(root, state){
      var box, mode, ref$, this$ = this;
      this.root = root;
      this.rootBox = box = root.firstChild;
      mode = box.classList.contains('text') ? 0 : 1;
      this.ctrl = mode === 0 ? new TextInputs(this) : null;
      box = root.parentNode.parentNode.parentNode;
      this.section = box = new sMainSection(box);
      this.mode = mode;
      this.state = state;
      this.locked = 2;
      this.current = [false, -1, -1, -1, -1];
      (ref$ = state.ready)[ref$.length] = box.init().then(function(x){
        if (x) {
          this$.ctrl.attach();
          this$.root.classList.add('v');
        }
        return x;
      });
    };
    Block.prototype = {
      init: function(cfg){
        this.ctrl.init(cfg);
        this.refresh();
      },
      refresh: function(){
        var a, b;
        a = this.state.data;
        b = this.current;
        if (a[0] !== b[0]) {
          this.rootBox.classList.toggle('active', a[0]);
          this.section.setClass('active', a[0]);
        }
        if (a[0] !== b[0] || a[1] !== b[1] || a[2] !== b[2]) {
          this.ctrl.set(a[1], a[2]);
        }
        if (a[3] !== b[3] || a[4] !== b[4]) {
          this.ctrl.set(a[3], a[4]);
        }
        b[0] = a[0], b[1] = a[1], b[2] = a[2], b[3] = a[3], b[4] = a[4];
      },
      submit: function(){
        var a, b;
        a = this.current;
        b = this.state.data;
        if (a[0] !== b[0]) {
          this.rootBox.classList.toggle('active', a[0]);
          this.section.setClass('active', a[0]);
        }
        b[0] = a[0], b[1] = a[1], b[2] = a[2];
        this.state.change();
      },
      lock: function(level){
        switch (level) {
        case 2:
          switch (this.locked) {
          case 1:
            this.ctrl.lock(1);
            // fallthrough
          case 0:
            this.rootBox.classList.remove('v');
            this.section.lock();
          }
          break;
        case 1:
          if (!this.locked) {
            this.ctrl.lock(1);
          }
          break;
        default:
          switch (this.locked) {
          case 2:
            this.section.lock(0);
            this.rootBox.classList.add('v');
            // fallthrough
          case 1:
            this.ctrl.lock(0);
          }
        }
        this.locked = level;
      }
    };
    state = new BlockState('price', 2, function(event, data){
      var i$, ref$, len$, b, a;
      switch (event) {
      case 'init':
        this.data = data.priceFilter;
        for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
          b = ref$[i$];
          b.init(data.config.locale.price);
        }
        break;
      case 'change':
        if (!this.pending) {
          for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
            a = ref$[i$];
            a.lock(1);
          }
        }
        break;
      case 'lock':
        for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
          a = ref$[i$];
          a.lock(2);
        }
        break;
      case 'load':
        for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
          a = ref$[i$];
          a.refresh();
          a.lock(0);
        }
      }
      return true;
    });
    blocks = arrayFrom$(document.querySelectorAll('.sm-blocks.price-filter'));
    blocks = blocks.map(function(root){
      return new Block(root, state);
    });
    return state;
  }();
  mPaginator = function(){
    var Control, BlockRange, Block, state, blocks;
    Control = function(block){
      var this$ = this;
      this.block = block;
      this.lock = null;
      this.lockType = 0;
      this.rootCS = getComputedStyle(block.root);
      this.rootBoxCS = getComputedStyle(block.rootBox);
      this.rangeCS = getComputedStyle(block.rangeBox);
      this.rootPads = [0, 0, 0, 0];
      this.baseSz = [0, 0, 0, 0, 0];
      this.currentSz = [0, 0, 0, 0, 0];
      this.dragbox = [];
      this.maxSpeed = 10;
      this.brake = 15;
      this.observer = null;
      this.keyDown = function(e){
        var a;
        if (this$.lock || this$.block.locked || !this$.block.range || !this$.block.mode) {
          return;
        }
        switch (e.code) {
        case 'ArrowLeft':
        case 'ArrowDown':
          a = this$.block.gotoP ? this$.block.gotoP.firstChild : null;
          this$.lockType = 1;
          this$.fast(null, a, false);
          break;
        case 'ArrowRight':
        case 'ArrowUp':
          a = this$.block.gotoN ? this$.block.gotoN.firstChild : null;
          this$.lockType = 1;
          this$.fast(null, a, true);
          break;
        default:
          return;
        }
        e.preventDefault();
        e.stopPropagation();
      };
      this.keyUp = function(e){
        if (this$.lock && this$.lockType === 1) {
          e.preventDefault();
          e.stopPropagation();
          this$.lock.resolve();
        }
      };
      this.setFocus = function(e){
        e.preventDefault();
        e.stopPropagation();
        this$.block.focus();
      };
      this.hover = function(e){
        e.preventDefault();
        e.stopPropagation();
        if (!this$.block.locked && this$.block.mode && (e = e.currentTarget)) {
          e.classList.add('hovered');
        }
      };
      this.unhover = function(e){
        e.preventDefault();
        e.stopPropagation();
        if (e = e.currentTarget) {
          e.classList.remove('hovered');
        }
      };
      this.wheel = function(e){
        var a, b, i$, ref$, len$;
        if (this$.lock || this$.block.locked || !this$.block.mode) {
          return;
        }
        e.preventDefault();
        e.stopPropagation();
        a = state.data[0];
        if ((b = state.data[1] - 1) === 0) {
          return;
        }
        a = a + 1 * Math.sign(e.deltaY);
        if (a > b) {
          a = 0;
        } else if (a < 0) {
          a = b;
        }
        state.data[0] = a;
        state.master.resolve(state);
        for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
          b = ref$[i$];
          b.refresh();
        }
        this$.block.focus();
      };
      this.fastForward = function(e){
        e.preventDefault();
        e.stopPropagation();
        if (this$.block.mode === 1 && !this$.lock && !this$.block.locked && e.isPrimary && !e.button) {
          this$.lockType = 0;
          this$.fast(e.pointerId, e.currentTarget, true);
        }
      };
      this.fastBackward = function(e){
        e.preventDefault();
        e.stopPropagation();
        if (this$.block.mode === 1 && !this$.lock && !this$.block.locked && e.isPrimary && !e.button) {
          this$.lockType = 0;
          this$.fast(e.pointerId, e.currentTarget, false);
        }
      };
      this.fastStop = function(e){
        e.preventDefault();
        e.stopPropagation();
        if (this$.lock && this$.lockType === 0) {
          this$.lock.resolve();
        }
      };
      this.dragStart = async function(e){
        var node, a, c, b, d, i$, ref$, len$;
        e.preventDefault();
        e.stopPropagation();
        if (this$.lock || this$.block.locked || this$.block.mode !== 1 || !e.isPrimary || e.button || typeof e.offsetX !== 'number') {
          return true;
        }
        this$.lock = newPromise();
        this$.lockType = 2;
        this$.block.focus();
        (await Promise.race([delay(200), this$.lock]));
        if (!this$.lock.pending) {
          this$.lock = null;
          return true;
        }
        node = this$.block.rangeBox;
        node.classList.add('active', 'drag');
        if (!node.hasPointerCapture(e.pointerId)) {
          node.setPointerCapture(e.pointerId);
        }
        a = this$.block.range;
        if ((c = a.pages.length) > 1) {
          b = a.index;
          c = c - a.index - 1;
        } else {
          b = 0;
        }
        if (a.first) {
          b += 1;
          c += 1;
        }
        if ((a = this$.currentSz)[4]) {
          d = a = a[4];
        } else if (a[3]) {
          d = a[3];
          a = a[2];
        } else {
          d = this$.baseSz[4];
          a = this$.baseSz[3];
        }
        e = this$.dragbox;
        e[0] = a + b * d;
        e[1] = e[0] / (b + 1);
        e[0] = e[0] - e[1];
        e[4] = a + c * d;
        e[3] = e[4] / (c + 1);
        e[4] = e[4] - e[3];
        e[2] = parseFloat(this$.rangeCS.getPropertyValue('width'));
        e[2] = e[2] - e[0] - e[4];
        if (!this$.currentSz[4]) {
          a = e[2] / (state.data[1] - (b + c));
          d = e[1] / 2;
          if (a < d) {
            e[1] = d + a;
            e[3] = e[3] / 2 + a;
          }
        }
        e[2] = e[2] - e[1] - e[3];
        e[5] = b;
        e[7] = c;
        e[6] = state.data[1] - e[5] - e[7] - 2;
        a = state.data[0];
        this$.lockType = 3;
        (await this$.lock);
        if (node.hasPointerCapture(e.pointerId)) {
          node.releasePointerCapture(e.pointerId);
        }
        node.classList.remove('active', 'drag');
        if (!this$.block.locked && a !== state.data[0]) {
          state.master.resolve(state);
          for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
            a = ref$[i$];
            if (a !== this$.block) {
              a.refresh();
            }
          }
        }
        this$.lock.resolve();
        this$.lock = null;
        return true;
      };
      this.drag = function(e){
        var d, c, b, a;
        e.preventDefault();
        e.stopPropagation();
        if (!this$.lock || this$.lockType !== 3) {
          return;
        }
        d = this$.dragbox;
        c = state.data[1];
        if ((b = e.offsetX) <= 0) {
          a = 0;
        } else if (b <= d[0]) {
          a = b * d[5] / d[0] | 0;
        } else if ((b -= d[0]) <= d[1]) {
          a = d[5];
        } else if ((b -= d[1]) <= d[2]) {
          b = b * d[6] / d[2] | 0;
          a = d[5] + 1 + b;
        } else if ((b -= d[2]) <= d[3]) {
          a = d[5] + d[6] + 1;
        } else if ((b -= d[3]) <= d[4]) {
          a = d[5] + d[6] + 2 + b * d[7] / d[4] | 0;
        } else {
          a = c - 1;
        }
        if (state.data[0] === a) {
          return;
        }
        state.data[0] = a;
        this$.block.refresh();
      };
      this.dragStop = function(e){
        var ref$;
        e.preventDefault();
        e.stopPropagation();
        if (this$.lock && ((ref$ = this$.lockType) === 2 || ref$ === 3)) {
          this$.lock.resolve();
        }
      };
      this.goto = function(e){
        var a, b, c;
        e.preventDefault();
        e.stopPropagation();
        if (this$.lock || this$.block.locked || !this$.block.mode) {
          return;
        }
        a = e.currentTarget.parentNode.className;
        b = state.data[0];
        c = state.data[1] - 1;
        if (a.indexOf('first') !== -1) {
          a = 0;
        } else if (a.indexOf('last') !== -1) {
          a = c;
        } else if (a.indexOf('prev') !== -1) {
          if ((a = b - 1) < 0) {
            a = c;
          }
        } else if (a.indexOf('next') !== -1) {
          if ((a = b + 1) > c) {
            a = 0;
          }
        }
        if (a === b) {
          return;
        }
        state.data[0] = a;
        state.master.resolve(state);
        blocks.forEach(function(b){
          return b.refresh();
        });
        this$.block.focus();
      };
      this.rangeGoto = function(){
        var R, a, b, c;
        if (!(R = this$.block.range)) {
          return null;
        }
        a = [];
        b = -1;
        c = R.pages.length;
        while (++b < c) {
          a[b] = this$.rangeGotoFunc(b - R.index);
        }
        return a;
      }();
      this.resize = function(e){
        var w, a, b, c, d;
        if (e) {
          w = e[0].contentRect.width;
        } else {
          a = this$.rootPads;
          a = a[1] + a[3];
          if ((w = this$.block.root.clientWidth - a) < 0) {
            w = 0;
          }
          this$.baseSz[0] = parseFloat(this$.rootBoxCS.getPropertyValue('width'));
          this$.baseSz[2] = parseFloat(this$.rangeCS.getPropertyValue('width'));
        }
        this$.currentSz[0] = w;
        e = w / this$.baseSz[0];
        a = this$.baseSz[1];
        b = this$.currentSz[1];
        this$.currentSz[1] = c = e > 0.999
          ? 0
          : e * a;
        if (b && !c) {
          this$.block.root.style.removeProperty('--height');
          this$.currentSz[2] = 0;
          this$.currentSz[3] = 0;
        } else if (c && Math.abs(c - b) > 0.1) {
          this$.block.root.style.setProperty('--height', c + 'px');
          this$.currentSz[2] = e * this$.baseSz[3];
          this$.currentSz[3] = e * this$.baseSz[4];
        }
        if (this$.block.flexy && this$.block.mode === 1) {
          a = this$.baseSz[0] - this$.baseSz[2];
          a = e > 0.999
            ? w - a
            : w - e * a;
          if ((c = this$.currentSz)[2]) {
            b = c[3]
              ? (c[3] + c[2]) / 2
              : c[2];
            c = c[4];
          } else {
            b = this$.baseSz[3];
            c = c[4];
          }
          if ((d = a / state.data[1]) <= b) {
            d = 0;
          }
          this$.currentSz[4] = d;
          if (c && !d) {
            this$.block.rangeBox.style.removeProperty('--page-size');
          } else if (d && Math.abs(d - b) > 0.1) {
            this$.block.rangeBox.style.setProperty('--page-size', d + 'px');
          }
        }
      };
    };
    Control.prototype = {
      attach: function(){
        var B, R, a, i$, len$, c, b, ref$;
        B = this.block;
        R = B.range;
        a = ['padding-top', 'padding-right', 'padding-bottom', 'padding-left'];
        for (i$ = 0, len$ = a.length; i$ < len$; ++i$) {
          c = i$;
          b = a[i$];
          this.rootPads[c] = parseInt(this.rootCS.getPropertyValue(b));
        }
        this.baseSz[0] = 0;
        this.baseSz[1] = parseInt(this.rootCS.getPropertyValue('--height'));
        this.baseSz[2] = parseFloat(this.rangeCS.getPropertyValue('width'));
        if (R) {
          a = getComputedStyle(R.pages[R.index]);
          this.baseSz[3] = parseFloat(a.getPropertyValue('min-width'));
          this.baseSz[4] = 0;
          if (R.pages.length > 1) {
            a = R.index > 0
              ? 0
              : R.index + 1;
            a = getComputedStyle(R.pages[a]);
            this.baseSz[4] = parseFloat(a.getPropertyValue('min-width'));
          }
        }
        B.root.addEventListener('keydown', this.keyDown, true);
        B.root.addEventListener('keyup', this.keyUp, true);
        B.root.addEventListener('click', this.setFocus);
        B.rootBox.addEventListener('wheel', this.wheel, true);
        B.rootBox.addEventListener('pointerenter', this.hover);
        B.rootBox.addEventListener('pointerleave', this.unhover);
        if (B.gotoF) {
          a = B.gotoF.firstChild;
          a.addEventListener('click', this.goto);
          a = B.gotoL.firstChild;
          a.addEventListener('click', this.goto);
        }
        if (B.gotoP) {
          a = B.gotoP.firstChild;
          a.addEventListener('pointerdown', this.fastBackward);
          a.addEventListener('pointerup', this.fastStop);
          a.addEventListener('click', this.goto);
          a = B.gotoN.firstChild;
          a.addEventListener('pointerdown', this.fastForward);
          a.addEventListener('pointerup', this.fastStop);
          a.addEventListener('click', this.goto);
        }
        if (R) {
          if (R.first) {
            a = R.first.firstChild;
            a.addEventListener('click', this.goto);
            a = R.last.firstChild;
            a.addEventListener('click', this.goto);
          }
          for (i$ = 0, len$ = (ref$ = R.buttons).length; i$ < len$; ++i$) {
            b = i$;
            a = ref$[i$];
            a.addEventListener('click', this.rangeGoto[b]);
          }
          a = R.buttons[R.index];
          a.addEventListener('pointerdown', this.dragStart);
          B.rangeBox.addEventListener('pointermove', this.drag);
          B.rangeBox.addEventListener('pointerup', this.dragStop);
          this.observer = a = new ResizeObserver(this.resize);
          a.observe(B.root);
        }
      },
      detach: function(){
        var a;
        if (a = this.observer) {
          a.disconnect();
          this.observer = null;
        }
      },
      rangeGotoFunc: function(i){
        var this$ = this;
        return function(e){
          var a;
          e.preventDefault();
          e.stopPropagation();
          if (this$.lock || this$.block.locked || !this$.block.mode) {
            return;
          }
          if (this$.block.mode === 1) {
            a = state.data[0] + i;
          } else {
            a = this$.block.range.first
              ? 1 + i + this$.block.range.index
              : i + this$.block.range.index;
          }
          if (a === state.data[0]) {
            return;
          }
          state.data[0] = a;
          state.master.resolve(state);
          blocks.forEach(function(b){
            return b.refresh();
          });
          this$.block.focus();
        };
      },
      fast: async function(id, node, forward){
        var a, inc, beg, end, b, c, i$, ref$, len$, d;
        if ((a = state.data[1]) === 1) {
          return false;
        }
        this.lock = newPromise();
        (await Promise.race([delay(200), this.lock]));
        if (forward) {
          inc = 1;
          beg = 0;
          end = a;
        } else {
          inc = -1;
          beg = a - 1;
          end = -1;
        }
        a = state.data[0];
        b = inc;
        c = this.brake;
        if (!this.lock.pending) {
          if (!id) {
            if ((a = state.data[0] + b) === end) {
              a = beg;
            }
            state.data[0] = a;
            state.master.resolve(state);
            for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
              b = ref$[i$];
              b.refresh();
            }
          }
          this.lock = null;
          this.block.focus();
          return true;
        }
        this.block.focus();
        this.block.rangeBox.classList.add('active');
        node.parentNode.classList.add('active');
        if (id !== null && !node.hasPointerCapture(id)) {
          node.setPointerCapture(id);
        }
        while (this.lock.pending) {
          if ((a = a + b) === end) {
            a = beg;
            b = inc;
            c = this.brake;
          }
          state.data[0] = a;
          (await this.refresh());
          if ((d = end - inc - inc * a) <= this.brake) {
            b = inc;
            d = 1000 / (1 + d);
            (await Promise.race([delay(d), this.lock]));
          } else if (inc * b < this.maxSpeed && --c === 0) {
            b = b + inc;
            c = this.brake;
          }
        }
        if (id !== null && node.hasPointerCapture(id)) {
          if (id !== null) {
            node.releasePointerCapture(id);
          }
        }
        node.parentNode.classList.remove('active');
        this.block.rangeBox.classList.remove('active');
        if (!this.block.locked) {
          state.master.resolve(state);
          for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
            b = ref$[i$];
            if (b !== this.block) {
              b.refresh();
            }
          }
        }
        this.lock.resolve();
        (await delay(60));
        this.lock = null;
        return true;
      },
      refresh: function(){
        var a, b;
        a = newPromise();
        b = this.block;
        requestAnimationFrame(function(){
          b.refresh();
          if (b.mode === 2) {
            b.focus();
          }
          requestAnimationFrame(function(){
            a.resolve();
          });
        });
        return a;
      }
    };
    BlockRange = function(box){
      var a, b, c;
      this.pages = a = arrayFrom$(box.querySelectorAll('.page.x'));
      this.buttons = a.map(function(a){
        return a.firstChild;
      });
      this.gap1 = box.querySelector('.gap.first');
      this.gap2 = box.querySelector('.gap.last');
      this.first = box.querySelector('.page.first');
      this.last = box.querySelector('.page.last');
      b = -1;
      c = a.length;
      while (++b < c) {
        if (a[b].classList.contains('current')) {
          break;
        }
      }
      this.index = b;
      this.current = a[b].firstChild;
      this.size = this.first ? c + 2 : c;
      this.nPages = Array(c).fill(0);
      this.nGap1 = 0;
      this.nGap2 = 0;
      this.nFirst = 0;
      this.nLast = 0;
      this.nCount = 0;
    };
    Block = function(root, state){
      var rootBox, a, b;
      this.root = root;
      this.rootBox = rootBox = root.firstChild;
      a = arrayFrom$(root.querySelectorAll('.goto.a'));
      b = arrayFrom$(root.querySelectorAll('.goto.b'));
      this.gotoF = (a.length && a[0]) || null;
      this.gotoL = (a.length && a[1]) || null;
      this.gotoP = (b.length && b[0]) || null;
      this.gotoN = (b.length && b[1]) || null;
      this.rangeBox = a = root.querySelector('.range');
      this.range = (a && new BlockRange(a)) || null;
      this.state = state;
      this.locked = true;
      this.flexy = rootBox.classList.contains('flexy');
      this.mode = 0;
      this.ctrl = new Control(this);
      this.ctrl.attach();
      this.refresh();
    };
    Block.prototype = {
      focus: function(){
        var a;
        if (!this.locked && this.range && (a = this.range.current) && document.activeElement !== a) {
          a.focus();
        }
      },
      refresh: function(){
        var R, index, count, nCount, nPages, nGap1, nGap2, nFirst, nLast, mode, current, i$, to$, a, b, c, d, len$;
        if (!(R = this.range)) {
          return;
        }
        index = this.state.data[0];
        count = this.state.data[1];
        nCount = 0;
        nPages = R.nPages.slice().fill(0);
        nGap1 = 0;
        nGap2 = 0;
        nFirst = 0;
        nLast = 0;
        if (!count) {
          mode = 0;
          current = null;
          nCount = R.size;
          for (i$ = R.index, to$ = nPages.length; i$ < to$; ++i$) {
            a = i$;
            nPages[a] = 1;
          }
          nGap2 = 100;
          nLast = 1;
        } else if (count > R.size) {
          mode = 1;
          current = R.buttons[R.index];
          nCount = R.size;
          if ((a = R.index - index) < 0) {
            nFirst = 1;
            nGap1 = 0 - a - 1;
            a = 0;
          }
          b = nPages.length - R.index - 1;
          c = count - index - 2;
          if (b > c) {
            b = R.index + c + 2;
          } else {
            nLast = count;
            nGap2 = c - b;
            b = nPages.length;
          }
          c = a - 1;
          d = index - R.index + a;
          while (++c < b) {
            nPages[c] = ++d;
          }
          if (a = nGap1 + nGap2) {
            a = 100 * nGap1 / a;
            if (a > 0 && a < 1) {
              a = 1;
            } else if (a > 99 && a < 100) {
              a = 99;
            } else {
              a = Math.round(a);
            }
            nGap1 = a;
            nGap2 = 100 - a;
          }
        } else {
          mode = 2;
          nCount = count;
          nFirst = a = (R.first && 1) || 0;
          b = -1;
          c = nPages.length;
          while (++b < c && a < count) {
            nPages[b] = ++a;
          }
          nLast = R.last && a < count ? count : 0;
          a = index + 1;
          current = a === nFirst
            ? R.first.firstChild
            : a === nLast
              ? R.last.firstChild
              : R.buttons[nPages.indexOf(a)];
        }
        if (mode !== this.mode) {
          if (!this.mode) {
            this.rootBox.classList.add('v');
          }
          if (!mode) {
            this.rootBox.classList.remove('v');
          } else if (mode === 1) {
            this.rangeBox.classList.remove('nogap');
          } else {
            this.rangeBox.classList.add('nogap');
          }
          this.mode = mode;
        }
        if (R.nCount !== nCount) {
          this.rangeBox.style.setProperty('--count', nCount);
          R.nCount = nCount;
          this.root.classList.remove('v');
          this.ctrl.resize();
          this.root.classList.add('v');
        }
        if (R.nFirst !== nFirst) {
          if (!R.nFirst) {
            R.first.classList.add('v');
          } else if (!nFirst) {
            R.first.classList.remove('v');
          }
          R.nFirst = nFirst;
        }
        if (R.nGap1 !== nGap1) {
          if (!R.nGap1) {
            R.gap1.classList.add('v');
          } else if (!nGap1) {
            R.gap1.classList.remove('v');
          }
          R.gap1.style.flexGrow = R.nGap1 = nGap1;
        }
        c = R.nPages;
        for (i$ = 0, len$ = nPages.length; i$ < len$; ++i$) {
          b = i$;
          a = nPages[i$];
          if (a !== c[b]) {
            if (!c[b]) {
              R.pages[b].classList.add('v');
            } else if (!a) {
              R.pages[b].classList.remove('v');
            }
            R.buttons[b].textContent = c[b] = a;
          }
        }
        if (R.nGap2 !== nGap2) {
          if (!R.nGap2) {
            R.gap2.classList.add('v');
          } else if (!nGap2) {
            R.gap2.classList.remove('v');
          }
          R.gap2.style.flexGrow = R.nGap2 = nGap2;
        }
        if (R.nLast !== nLast) {
          if (!R.nLast) {
            R.last.classList.add('v');
          } else if (!nLast) {
            R.last.classList.remove('v');
          }
          R.last.firstChild.textContent = R.nLast = nLast;
        }
        if (R.current !== current) {
          if (R.current) {
            R.current.parentNode.classList.remove('current');
          }
          if (current) {
            current.parentNode.classList.add('current');
          }
          R.current = current;
        }
      },
      lock: async function(){
        var R;
        if (!this.locked) {
          if (this.ctrl.lock) {
            (await this.ctrl.lock.spin());
          }
          this.locked = true;
          this.rootBox.classList.remove('v');
          if ((R = this.range) && R.current) {
            R.current.parentNode.classList.remove('current');
            R.current = null;
          }
        }
        return true;
      },
      unlock: function(){
        this.rootBox.classList.add('v');
        this.locked = false;
      }
    };
    state = new BlockState('page', 1, function(event, data){
      var i$, ref$, len$, a;
      switch (event) {
      case 'lock':
        for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
          a = ref$[i$];
          a.lock();
        }
        break;
      case 'change':
        for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
          a = ref$[i$];
          if ((a = a.ctrl.lock) && a.pending) {
            return false;
          }
        }
        break;
      case 'load':
        for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
          a = ref$[i$];
          if (a.locked) {
            a.unlock();
          }
          if (a.ctrl.lock) {
            return true;
          }
        }
        state.data[0] = data.pageIndex;
        state.data[1] = data.pageCount;
        for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
          a = ref$[i$];
          a.refresh();
        }
      }
      return true;
    });
    state.data = [0, 0];
    blocks = arrayFrom$(document.querySelectorAll('.sm-blocks.paginator'));
    blocks = blocks.map(function(root){
      return new Block(root, state);
    });
    return state;
  }();
  mOrderer = function(){
    var Control, Block, state, blocks;
    Control = function(block){
      var this$ = this;
      this.block = block;
      this.hovered = 0;
      this.focused = false;
      this.hover = function(e){
        e.preventDefault();
        if (!this$.block.locked && !this$.hovered) {
          this$.hovered = 1;
          this$.block.rootBox.classList.add('hovered');
        }
      };
      this.unhover = function(e){
        e.preventDefault();
        if (this$.hovered === 1) {
          this$.hovered = 0;
          this$.block.rootBox.classList.remove('hovered');
        }
      };
      this.switchVariant = function(e){
        var B, D, a, b, i$, ref$, len$;
        e.preventDefault();
        e.stopPropagation();
        B = this$.block;
        D = state.data;
        if (!B.locked && (a = B.current[1]) > 0) {
          state.data[1] = a = a === 1 ? 2 : 1;
          b = B.select.selectedIndex;
          b = B.select.options[b];
          b.value = a;
          B.select.focus();
          state.master.resolve(state);
          for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
            a = ref$[i$];
            a.refresh();
          }
        }
      };
      this.switchFocusIn = function(e){
        e.preventDefault();
        e.stopPropagation();
        if (!this$.block.locked && this$.hovered !== 2) {
          this$.hovered = 2;
          this$.block.rootBox.classList.add('hovered');
        }
      };
      this.switchFocusOut = function(e){
        e.preventDefault();
        e.stopPropagation();
        if (!this$.block.locked && this$.hovered === 2) {
          this$.hovered = 0;
          this$.block.rootBox.classList.remove('hovered');
        }
      };
      this.selected = function(e){
        var B, a, i$, ref$, len$;
        e.preventDefault();
        e.stopPropagation();
        B = this$.block;
        if (!B.locked) {
          a = B.select.selectedIndex;
          state.data[0] = B.oList[a];
          state.data[1] = +B.select.options[a].value;
          state.master.resolve(state);
          for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
            a = ref$[i$];
            a.refresh();
          }
        }
      };
    };
    Control.prototype = {
      attach: function(){
        var B, this$ = this;
        B = this.block;
        B.rootBox.addEventListener('pointerenter', this.hover);
        B.rootBox.addEventListener('pointerleave', this.unhover);
        B['switch'].forEach(function(a){
          a.addEventListener('click', this$.switchVariant);
          a.addEventListener('focusin', this$.switchFocusIn);
          a.addEventListener('focusout', this$.switchFocusOut);
        });
        B.select.addEventListener('input', this.selected);
      },
      detach: function(){
        true;
      }
    };
    Block = function(root, state){
      var a;
      this.root = root;
      this.rootBox = root.firstChild;
      this.variant = a = arrayFrom$(root.querySelectorAll('.variant'));
      this['switch'] = a.map(function(a){
        return a.firstChild;
      });
      this.select = root.querySelector('select');
      this.oMap = null;
      this.oList = null;
      this.state = state;
      this.locked = true;
      this.current = ['', -1];
      this.ctrl = new Control(this);
      this.ctrl.attach();
      this.root.classList.add('v');
    };
    Block.prototype = {
      load: function(options, current){
        var b, i$, len$, a, c;
        if (this.oMap = options) {
          this.oList = b = Object.getOwnPropertyNames(options);
          for (i$ = 0, len$ = b.length; i$ < len$; ++i$) {
            a = b[i$];
            c = document.createElement('option');
            c.textContent = options[a][0];
            c.value = options[a][1];
            this.select.appendChild(c);
          }
          this.state.data = current;
        } else {
          a = this.oList.length;
          b = this.select;
          while (--a > 0) {
            b.removeChild(b.options[a]);
          }
          this.oList = null;
        }
        this.refresh();
      },
      refresh: function(){
        var a, b, c;
        a = this.state.data;
        b = this.current;
        if (a[0] !== b[0]) {
          if ((c = this.oList.indexOf(a[0])) !== this.select.selectedIndex) {
            this.select.selectedIndex = c;
          }
          if ((!a[1] && b[1]) || (a[1] && !b[1])) {
            c = !a[1];
            this['switch'].forEach(function(d){
              d.disabled = c;
            });
          }
          b[0] = a[0];
        }
        if (a[1] !== b[1]) {
          if (b[1] >= 0) {
            c = 'abc'[b[1]];
            this.variant.forEach(function(d){
              d.classList.remove(c);
            });
          }
          if (a[1] >= 0) {
            c = 'abc'[a[1]];
            this.variant.forEach(function(d){
              d.classList.add(c);
            });
          }
          b[1] = a[1];
        }
      },
      unlock: function(){
        this.rootBox.classList.add('v');
        this.locked = false;
      }
    };
    state = new BlockState('order', 0, function(event, data){
      var i$, ref$, len$, a;
      switch (event) {
      case 'init':
        for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
          a = ref$[i$];
          a.load(data.orderOption, data.orderFilter);
        }
        break;
      case 'load':
        for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
          a = ref$[i$];
          if (a.locked) {
            a.unlock();
          }
          a.refresh();
        }
      }
      return true;
    });
    blocks = arrayFrom$(document.querySelectorAll('.sm-blocks.orderer'));
    blocks = blocks.map(function(root){
      return new Block(root, state);
    });
    return state;
  }();
  KING && KING.rule([mCategoryFilter, mPriceFilter, mPaginator, mOrderer]);
  return (await KING);
}();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}