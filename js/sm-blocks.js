// Generated by LiveScript 1.6.0
"use strict";
var smBlocks, slice$ = [].slice, arrayFrom$ = Array.from || function(x){return slice$.call(x);};
smBlocks = async function(){
  var BRAND, soFetch, newPromise, delay, newMetaObject, BlockState, smProducts, smCart, smCategoryFilter, smPaginator, smOrderer, smSizer;
  BRAND = 'sm-blocks';
  soFetch = httpFetch.create({
    baseUrl: '/?rest_route=/' + BRAND + '/kiss',
    mounted: true,
    notNull: true,
    method: 'POST'
  });
  newPromise = function(){
    var r, p;
    r = null;
    p = new Promise(function(resolve){
      r = resolve;
    });
    p.pending = true;
    p.resolve = function(data){
      p.pending = false;
      r(data);
    };
    return p;
  };
  delay = function(ms, f){
    var p, t;
    p = newPromise();
    t = setTimeout(function(){
      p.resolve(true);
      if (f) {
        f();
      }
    }, ms);
    p.cancel = function(){
      clearTimeout(t);
      p.resolve(false);
    };
    return p;
  };
  newMetaObject = function(){
    var handler;
    handler = {
      get: function(o, k){
        if (o[0].hasOwnProperty(k)) {
          return o[0][k];
        }
        if (k[0] === '$') {
          k = k.slice(1);
          return k && o[0].hasOwnProperty(k) ? o[0][k] !== o[1][k] : true;
        }
        if (k[0] === '_') {
          k = k.slice(1);
          return k && o[1].hasOwnProperty(k) ? o[1][k] : null;
        }
        return null;
      },
      set: function(o, k, v){
        if (o[0].hasOwnProperty(k)) {
          o[1][k] = o[0][k];
          o[0][k] = v;
        }
        return true;
      }
    };
    return function(o){
      return new Proxy([o, import$({}, o)], handler);
    };
  }();
  BlockState = function(name, handler){
    this.name = name;
    this.event = handler;
    this.data = null;
    this.master = null;
    this.ready = false;
  };
  BlockState.prototype = {
    set: function(data){
      this.data = data;
      this.master.resolve(this);
    }
  };
  smProducts = function(){
    var root, grid, gridList, gridControl, gridLock, gridResizer, gridLoader, Block, Data, newImageBlock, newTitleBlock, newPriceBlock, newControlBlock, newItem;
    if (!(root = document.querySelector('#sm-products'))) {
      return null;
    }
    if (!(grid = root.querySelector('.main'))) {
      return null;
    }
    gridList = arrayFrom$(grid.children);
    gridControl = [];
    gridLock = null;
    gridResizer = function(){
      var style, state, f;
      style = getComputedStyle(grid);
      state = {
        columnsMax: +style.getPropertyValue('--columns'),
        columnsMin: +grid.dataset.cols,
        columnGap: parseInt(style.getPropertyValue('--column-gap')),
        rowsMin: +style.getPropertyValue('--rows'),
        rowsMax: 0,
        rowGap: parseInt(style.getPropertyValue('--row-gap')),
        itemX: parseInt(style.getPropertyValue('--item-max-x')),
        itemXA: 0,
        itemY: parseInt(style.getPropertyValue('--item-max-y')),
        itemYA: 0,
        fontSizeMax: parseInt(style.getPropertyValue('--font-size')),
        ratio: 0,
        width: 0,
        fontSize: 0,
        columns: 0,
        rows: 0
      };
      state.ratio = state.itemY / state.itemX;
      state.rowsMax = Math.ceil(gridList.length / state.columnsMin);
      state.itemXA = state.itemX + state.columnGap / 2;
      state.itemYA = state.itemY + state.rowGap / 2;
      f = function(e){
        var x, a, w, i$, ref$, len$, c;
        x = e
          ? e[0].contentRect.width
          : root.clientWidth;
        if (state.columnsMin === state.columnsMax) {
          state.columns = state.columnsMax;
          state.rows = state.rowsMin;
        } else {
          if ((a = x / state.itemXA | 0) > state.columnsMax) {
            state.columns = state.columnsMax;
            state.rows = state.rowsMin;
          } else if (a < state.columnsMin) {
            state.columns = state.columnsMin;
            state.rows = state.rowsMax;
          } else {
            state.columns = a;
            state.rows = Math.ceil(gridList.length / a);
          }
        }
        a = state.columns;
        w = a === 1
          ? state.itemX
          : state.itemX * a + state.columnGap * (a - 1);
        if (w <= x) {
          a = state.rows;
          state.width = w;
          state.height = a === 1
            ? state.itemY
            : state.itemY * a + state.rowGap * (a - 1);
          state.fontSize = state.fontSizeMax;
        } else {
          a = x / w;
          state.width = x;
          state.height = state.rows * state.itemYA * a;
          state.fontSize = state.fontSizeMax * a;
        }
        grid.style.setProperty('--columns', state.columns);
        grid.style.setProperty('--rows', state.rows);
        grid.style.setProperty('--height', state.height + 'px');
        grid.style.setProperty('--font-size', state.fontSize + 'px');
        for (i$ = 0, len$ = (ref$ = gridControl).length; i$ < len$; ++i$) {
          c = ref$[i$];
          c.event('resize', state);
        }
      };
      new ResizeObserver(f).observe(root, {
        box: 'border-box'
      });
      return f;
    }();
    gridLoader = function(){
      var cooldown, dirtyLoad, state, xFetch, req, setState, unload, newMasterPromise;
      cooldown = 400;
      dirtyLoad = false;
      state = {
        total: 0,
        count: 0,
        pages: 0,
        index: 0
      };
      xFetch = httpFetch.create({
        baseUrl: '/?rest_route=/' + BRAND + '/kiss',
        mounted: true,
        notNull: true,
        method: 'POST',
        timeout: 0,
        parseResponse: 'stream'
      });
      req = {
        func: 'products',
        limit: gridList.length,
        offset: 0,
        order: 'default',
        category: null
      };
      setState = function(s){
        var a, b, i$, ref$, len$, c, j$, ref1$, len1$, d;
        switch (s.name) {
        case 'category':
          a = [];
          b = [];
          for (i$ = 0, len$ = (ref$ = s.data).length; i$ < len$; ++i$) {
            c = ref$[i$];
            switch (c[0]) {
            case 'AND':
              if (c[1].length) {
                a[a.length] = c[1];
              }
              break;
            case 'OR':
              for (j$ = 0, len1$ = (ref1$ = c[1]).length; j$ < len1$; ++j$) {
                d = ref1$[j$];
                if (b.indexOf(d) === -1) {
                  b[b.length] = d;
                }
              }
            }
          }
          if (b.length) {
            a[a.length] = b;
          }
          req.category = a.length ? a : null;
          req.offset = state.index = state.pages = 0;
          break;
        case 'page':
          if (state.pages) {
            state.index = s.data[0];
            req.offset = state.index * req.limit;
          } else {
            state.index = req.offset = 0;
          }
        }
      };
      unload = function(){
        var c;
        if (!(c = state.count)) {
          return;
        }
        while (--c >= 0) {
          gridList[c].cls();
        }
        state.count = 0;
      };
      newMasterPromise = function(){
        var p, r;
        p = newPromise();
        r = p.resolve;
        p.resolve = function(data){
          if (data) {
            setState(data);
          }
          if (p.pending) {
            r();
          } else if (!dirtyLoad) {
            dirtyLoad = true;
          }
        };
        return p;
      };
      return async function(){
        var a, i$, ref$, len$, c, b;
        if (dirtyLoad) {
          dirtyLoad = false;
          unload();
          (await delay(cooldown));
        } else {
          a = !gridLock;
          gridLock = newMasterPromise();
          for (i$ = 0, len$ = (ref$ = gridControl).length; i$ < len$; ++i$) {
            c = ref$[i$];
            c.master = gridLock;
          }
          if (a) {
            gridLock.resolve();
          } else {
            (await gridLock);
            unload();
          }
        }
        if (dirtyLoad) {
          return true;
        }
        for (i$ = 0, len$ = (ref$ = gridControl).length; i$ < len$; ++i$) {
          c = ref$[i$];
          if (c.ready) {
            if (!c.event('change', state)) {
              return true;
            }
          }
        }
        if ((a = (await xFetch(req))) instanceof Error) {
          return false;
        }
        if (dirtyLoad) {
          a.cancel();
          return true;
        }
        if ((state.total = (await a.readInt())) === null) {
          a.cancel();
          return false;
        }
        b = gridList.length;
        state.count = b > state.total
          ? state.total
          : (c = state.total - req.offset) < b ? c : b;
        state.pages = Math.ceil(state.total / b);
        for (i$ = 0, len$ = (ref$ = gridControl).length; i$ < len$; ++i$) {
          c = ref$[i$];
          c.event('init', state);
          if (!c.ready) {
            c.ready = true;
          }
        }
        c = -1;
        while (++c < state.count && !dirtyLoad) {
          if ((b = (await a.readJSON())) === null) {
            a.cancel();
            return false;
          }
          gridList[c].set(b);
        }
        if (c !== state.count) {
          state.count = c;
        } else {
          (await a.read());
        }
        a.cancel();
        return true;
      };
    }();
    Block = function(box){
      this.box = box;
      this.data = null;
      this.set = null;
      this.cls = null;
    };
    Data = function(box, value){
      this.box = box;
      this.container = box.children[0];
      this.placeholder = box.children[1];
      this.value = value;
      this.config = null;
    };
    Data.prototype = {
      loaded: function(){
        this.box.classList.add('loaded');
      },
      unloaded: function(){
        this.box.classList.remove('loaded');
      }
    };
    newImageBlock = function(){
      var loaded, set, cls;
      loaded = function(block){
        return function(){
          var img;
          img = block.data.value;
          if (img.complete && img.naturalWidth !== 0) {
            block.data.loaded();
          }
        };
      };
      set = function(data){
        var img, a, b;
        if (data = data.image) {
          img = this.data.value;
          for (a in data) {
            b = data[a];
            img[a] = b;
          }
        }
      };
      cls = function(){
        var a;
        a = this.data.value;
        a.srcset = a.src = '';
        this.data.unloaded();
      };
      return function(node){
        var a, img;
        a = new Block(node);
        img = node.querySelector('img');
        img.addEventListener('load', loaded(a));
        a.data = new Data(node, img);
        a.set = set;
        a.cls = cls;
        return a;
      };
    }();
    newTitleBlock = function(){
      var set, cls;
      set = function(data){
        var a;
        a = data.name.replace(/\s+([\\\|/.]){1}\s+/, "\n");
        this.data.container.innerText = a;
        this.data.loaded();
      };
      cls = function(){
        this.data.container.innerText = '';
        this.data.unloaded();
      };
      return function(node){
        var a;
        a = new Block(node);
        a.data = new Data(node, null);
        a.set = set;
        a.cls = cls;
        return a;
      };
    }();
    newPriceBlock = function(){
      var map, expThousandSplit, expValueSplit, set, cls;
      map = ['.currency', '.dot', '.r0', '.r1', '.c0', '.c1'];
      expThousandSplit = /\B(?=(\d{3})+(?!\d))/;
      expValueSplit = /[^0-9]/;
      set = function(data){
        var v, c, d, a, b, i$, ref$, len$, i, n;
        v = this.data.value;
        c = data.currency;
        if (d = data.price) {
          a = d[0].split(expValueSplit, 2);
          b = d[1].split(expValueSplit, 2);
          a[1] = a[1]
            ? a[1].substring(0, c[3]).padEnd(c[3], '0')
            : '0'.repeat(c[3]);
          b[1] = b[1]
            ? b[1].substring(0, c[3]).padEnd(c[3], '0')
            : '0'.repeat(c[3]);
          if (c[2]) {
            a[0] = a[0].replace(expThousandSplit, c[2]);
            b[0] = b[0].replace(expThousandSplit, c[2]);
          }
          c = [c[0], c[1], a[0], a[1], b[0], b[1]];
          for (i$ = 0, len$ = (ref$ = this.data.value).length; i$ < len$; ++i$) {
            i = i$;
            n = ref$[i$];
            if (n) {
              n.forEach(fn$);
            }
          }
          c = a[0] + '.' + a[1];
          d = b[0] + '.' + b[1];
          if (c !== d) {
            this.data.container.classList.add(c > d ? 'lower' : 'higher');
          }
          if (data.currency[4]) {
            this.data.container.classList.add('right');
          }
        } else {
          this.data.container.classList.add('none');
        }
        this.data.loaded();
        function fn$(n){
          n.textContent = c[i];
        }
      };
      cls = function(){
        var i$, ref$, len$, i, n;
        for (i$ = 0, len$ = (ref$ = this.data.value).length; i$ < len$; ++i$) {
          i = i$;
          n = ref$[i$];
          if (n) {
            n.forEach(fn$);
          }
        }
        this.data.unloaded();
        function fn$(n){
          n.textContent = '';
        }
      };
      return function(node){
        var a, e;
        a = new Block(node);
        e = map.map(function(e){
          e = arrayFrom$(node.querySelectorAll(e));
          return e.length ? e : null;
        });
        if (e.every(function(e){
          return e === null;
        })) {
          e = null;
        }
        a.data = new Data(node, e);
        a.set = set;
        a.cls = cls;
        return a;
      };
    }();
    newControlBlock = function(){
      var map, set, cls;
      map = ['.link', '.cart'];
      set = function(data){
        var c, e, s;
        c = this.data.config = [];
        e = this.data.value;
        s = data.stock;
        e[0] && e[0].forEach(function(e){
          e.href = data.link;
        });
        e[1] && e[1].forEach(function(e, i){
          var x, f;
          if (s.status !== 'instock') {
            e.classList.add('none');
            return;
          }
          x = smCart.get(data.id);
          if (s.count === 0 || (x && s.count <= x.quantity)) {
            e.disabled = true;
          }
          c[i] = f = async function(a){
            var x;
            a.preventDefault();
            e.disabled = true;
            if (!(a = (await smCart.add(data.id)))) {
              return;
            }
            if (!(await smCart.load())) {
              return;
            }
            x = smCart.get(data.id);
            if (!x || s.count <= x.quantity) {
              return;
            }
            e.disabled = false;
          };
          e.addEventListener('click', f);
        });
        this.data.loaded();
      };
      cls = function(){
        var c, e;
        c = this.data.config;
        e = this.data.value;
        e[0] && e[0].forEach(function(e){
          e.href = '';
        });
        e[1] && e[1].forEach(function(e, i){
          e.removeEventListener('click', c[i]);
          e.disabled = false;
          e.classList.remove('none');
        });
        this.data.unloaded();
      };
      return function(node){
        var a, e;
        a = new Block(node);
        e = map.map(function(e){
          e = arrayFrom$(node.querySelectorAll(e));
          return e.length ? e : null;
        });
        a.data = new Data(node, e);
        a.set = set;
        a.cls = cls;
        return a;
      };
    }();
    newItem = function(){
      var map, Item;
      map = {
        name: ['.title', newTitleBlock],
        image: ['.head', newImageBlock],
        price: ['.price', newPriceBlock],
        controls: ['.controls', newControlBlock]
      };
      Item = function(node){
        this.node = node;
        this.id = 0;
        this.name = null;
        this.image = null;
        this.icon = null;
        this.features = null;
        this.price = null;
        this.controls = null;
      };
      Item.prototype = {
        set: function(data){
          var a;
          this.id = data.id;
          for (a in map) {
            if (this[a]) {
              this[a].set(data);
            }
          }
          this.node.classList.remove('empty');
        },
        cls: function(){
          var a;
          for (a in map) {
            if (this[a]) {
              this[a].cls();
            }
          }
          this.node.classList.add('empty');
        }
      };
      return function(node){
        var a, b, ref$, c, d;
        a = new Item(node);
        for (b in ref$ = map) {
          c = ref$[b];
          if (d = node.querySelector(c[0])) {
            a[b] = c[1](d);
          }
        }
        return a;
      };
    }();
    return {
      resize: gridResizer,
      load: function(){
        var started, active;
        started = false;
        active = false;
        return async function(){
          if (started) {
            if (gridLock) {
              gridLock.resolve();
            }
            return true;
          }
          started = true;
          if (!active) {
            gridList = gridList.map(function(a){
              return newItem(a);
            });
            gridResizer();
            root.classList.remove('inactive');
            active = true;
          }
          for (;;) {
            if (!(await gridLoader())) {
              console.log('FATAL ERROR');
              break;
            }
          }
          return started = false;
        };
      }(),
      add: function(s){
        gridControl[gridControl.length] = s;
      }
    };
  }();
  smCart = function(){
    var data;
    data = null;
    return {
      add: async function(id){
        var a;
        a = (await soFetch({
          func: 'cart',
          op: 'set',
          id: id
        }));
        if (a instanceof Error) {
          return false;
        }
        a = wc_add_to_cart_params.wc_ajax_url.replace('%%endpoint%%', 'get_refreshed_fragments');
        a = (await httpFetch({
          url: a,
          notNull: true
        }));
        if (a instanceof Error) {
          return true;
        }
        jQuery(document.body).trigger('added_to_cart', [a.fragments, a.cart_hash, null]);
        return true;
      },
      get: function(id){
        var a, ref$, b;
        if (!data) {
          return null;
        }
        for (a in ref$ = data) {
          b = ref$[a];
          if (b.product_id === id) {
            return b;
          }
        }
        return null;
      },
      load: async function(){
        var a;
        a = (await soFetch({
          func: 'cart',
          op: 'get'
        }));
        if (a instanceof Error) {
          return null;
        }
        return data = a;
      }
    };
  }();
  smCategoryFilter = function(){
    var Block, Item, ItemState, ItemEvents, state, blocks;
    Block = function(root){
      var item, sect, list, i$, len$, a, b, c, ref$, d;
      this.root = root;
      this.op = root.dataset.op;
      this.index = 0;
      this.item = item = {};
      this.sect = sect = {};
      list = arrayFrom$(root.querySelectorAll('.item'));
      for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
        a = list[i$];
        b = new Item(this, a);
        item[b.id] = b;
        if (b.sect) {
          sect[b.id] = b;
        }
      }
      for (a in sect) {
        b = sect[a];
        b.children = c = [];
        for (i$ = 0, len$ = (ref$ = b.sect.children).length; i$ < len$; ++i$) {
          a = ref$[i$];
          d = item[a.dataset.id];
          d.parent = b;
          c[c.length] = item[a.dataset.id];
        }
      }
    };
    Block.prototype = {
      init: function(index){
        var a, item;
        this.index = index;
        state.data[index] = [this.op, []];
        for (a in this.item) {
          item = this.item[a];
          item.events.attach();
        }
        this.root.classList.remove('inactive');
      },
      refresh: function(list){
        var i$, len$, a, b, ref$;
        for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
          a = list[i$];
          a = this.item[a];
          if (b = a.state._checked) {
            a.checkbox.classList.remove(b === 2 ? 'indeterminated' : 'checked');
          }
          if (b = a.state.checked) {
            a.checkbox.classList.add(b === 2 ? 'indeterminated' : 'checked');
          }
        }
        list = [];
        for (a in ref$ = this.item) {
          b = ref$[a];
          a = b.id;
          b = b.state;
          if (b.checked === 1 && b.count > 0) {
            list[list.length] = a;
          }
        }
        b = state.data[this.index][1];
        if (b.length === list.length) {
          a = list.every(function(a){
            return b.indexOf(a) !== -1;
          });
          if (a) {
            return;
          }
        }
        state.data[this.index][1] = list;
        state.master.resolve(state);
      }
    };
    Item = function(block, node){
      var name;
      this.block = block;
      this.node = node;
      this.id = +node.dataset.id;
      this.parent = null;
      this.children = null;
      this.name = name = node.children[0];
      this.nameBox = name.querySelector('.box');
      this.input = name.querySelector('.box > input');
      this.checkbox = name.querySelector('.box > .check');
      this.count = name.querySelector('.count');
      this.arrow = name.querySelector('.arrow');
      this.sect = node.children[1] ? node.children[1] : null;
      this.state = newMetaObject(new ItemState(this));
      this.events = new ItemEvents(this);
    };
    Item.prototype = {
      toggleCheckbox: function(){
        var setChildren, setParent;
        setChildren = function(items, checked){
          var list, i$, len$, a;
          list = [];
          for (i$ = 0, len$ = items.length; i$ < len$; ++i$) {
            a = items[i$];
            if (a.state.checked !== checked) {
              a.state.checked = checked;
              list[list.length] = a.id;
              if (a.children) {
                list = list.concat(setChildren(a.children, checked));
              }
            }
          }
          return list;
        };
        setParent = function(item, checked){
          var a, i$, ref$, len$, b;
          if (checked === 2) {
            a = 2;
          } else {
            a = checked;
            for (i$ = 0, len$ = (ref$ = item.children).length; i$ < len$; ++i$) {
              b = ref$[i$];
              if (b.state.checked !== a) {
                a = 2;
                break;
              }
            }
          }
          if (item.state.checked === a) {
            b = [];
          } else {
            item.state.checked = a;
            b = [item.id];
          }
          return item.parent ? setParent(item.parent, a).concat(b) : b;
        };
        return function(){
          var s, list;
          s = this.state;
          s.checked = s.checked === 2
            ? 1
            : s.checked ? 0 : 1;
          list = [this.id];
          if (this.parent) {
            list = list.concat(setParent(this.parent, s.checked));
          }
          if (this.children) {
            list = list.concat(setChildren(this.children, s.checked));
          }
          this.block.refresh(list);
        };
      }()
    };
    ItemState = function(item){
      this.checked = 0;
      this.opened = item.sect ? item.sect.classList.contains('opened') : false;
      this.count = +item.node.dataset.count;
      this.order = +item.node.dataset.order;
    };
    ItemEvents = function(item){
      this.item = item;
      this.toggleSection = function(e){
        var s;
        e.preventDefault();
        e.stopPropagation();
        s = item.state;
        s.opened = !s.opened;
        item.sect.classList.toggle('opened', s.opened);
        item.arrow.classList.toggle('opened', s.opened);
        item.input.focus();
      };
      this.toggleCheckbox = function(e){
        e.preventDefault();
        e.stopPropagation();
        item.toggleCheckbox();
        item.input.focus();
      };
    };
    ItemEvents.prototype = {
      attach: function(){
        var item;
        if ((item = this.item).sect) {
          item.arrow.addEventListener('click', this.toggleSection);
        }
        item.nameBox.addEventListener('click', this.toggleCheckbox, true);
      },
      detach: function(){
        var item;
        if ((item = this.item).sect) {
          item.arrow.removeEventListener('click', this.toggleSection);
        }
        item.nameBox.removeEventListener('click', this.toggleCheckbox, true);
      }
    };
    state = new BlockState('category', function(event, data){
      switch (event) {
      case 'init':
        if (!state.ready) {
          state.data = [];
          blocks.forEach(function(a, b){
            a.init(b);
          });
        }
      }
      return true;
    });
    blocks = arrayFrom$(document.querySelectorAll('.sm-category-filter'));
    blocks = blocks.map(function(root){
      return new Block(root);
    });
    return state;
  }();
  smPaginator = function(){
    var Control, BlockRange, Block, state, blocks;
    Control = function(block){
      var this$ = this;
      this.block = block;
      this.lock = null;
      this.lockType = 0;
      this.rootCS = getComputedStyle(block.root);
      this.rootBoxCS = getComputedStyle(block.rootBox);
      this.rootPads = [0, 0, 0, 0];
      this.baseSz = [0, 0];
      this.currentSz = [0, 0];
      this.pageSz = [0, 0];
      this.dragbox = [];
      this.maxSpeed = 10;
      this.brake = 15;
      this.keyDown = function(e){
        var a;
        if (this$.lock || !this$.block.range || !this$.block.mode) {
          return;
        }
        switch (e.code) {
        case 'ArrowLeft':
        case 'ArrowDown':
          a = this$.block.gotoP ? this$.block.gotoP.firstChild : null;
          this$.lockType = 1;
          this$.fast(null, a, false);
          break;
        case 'ArrowRight':
        case 'ArrowUp':
          a = this$.block.gotoN ? this$.block.gotoN.firstChild : null;
          this$.lockType = 1;
          this$.fast(null, a, true);
          break;
        default:
          return;
        }
        e.preventDefault();
        e.stopPropagation();
      };
      this.keyUp = function(e){
        if (this$.lock && this$.lockType === 1) {
          e.preventDefault();
          e.stopPropagation();
          this$.lock.resolve();
        }
      };
      this.setFocus = function(e){
        e.preventDefault();
        e.stopPropagation();
        this$.block.focus();
      };
      this.hover = function(e){
        e.preventDefault();
        e.stopPropagation();
        if (this$.block.mode && (e = e.currentTarget)) {
          e.classList.add('hovered');
        }
      };
      this.unhover = function(e){
        e.preventDefault();
        e.stopPropagation();
        if (e = e.currentTarget) {
          e.classList.remove('hovered');
        }
      };
      this.wheel = function(e){
        var a, b, i$, ref$, len$;
        if (this$.lock || !this$.block.mode) {
          return;
        }
        e.preventDefault();
        e.stopPropagation();
        a = state.data[0];
        if ((b = state.data[1] - 1) === 0) {
          return;
        }
        a = a + 1 * Math.sign(e.deltaY);
        if (a > b) {
          a = 0;
        } else if (a < 0) {
          a = b;
        }
        state.data[0] = a;
        state.master.resolve(state);
        for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
          b = ref$[i$];
          b.refresh();
        }
        this$.block.focus();
      };
      this.fastForward = function(e){
        e.preventDefault();
        e.stopPropagation();
        if (this$.block.mode === 1 && !this$.lock && e.isPrimary && !e.button) {
          this$.lockType = 0;
          this$.fast(e.pointerId, e.currentTarget, true);
        }
      };
      this.fastBackward = function(e){
        e.preventDefault();
        e.stopPropagation();
        if (this$.block.mode === 1 && !this$.lock && e.isPrimary && !e.button) {
          this$.lockType = 0;
          this$.fast(e.pointerId, e.currentTarget, false);
        }
      };
      this.fastStop = function(e){
        e.preventDefault();
        e.stopPropagation();
        if (this$.lock && this$.lockType === 0) {
          this$.lock.resolve();
        }
      };
      this.dragStart = async function(e){
        var node, a, c, b, d, i$, ref$, len$;
        e.preventDefault();
        e.stopPropagation();
        if (this$.lock || this$.block.mode !== 1 || !e.isPrimary || e.button || typeof e.offsetX !== 'number') {
          return true;
        }
        this$.lock = newPromise();
        this$.lockType = 2;
        node = this$.block.rangeBox;
        this$.block.rootBox.classList.add('active');
        node.classList.add('drag');
        if (!node.hasPointerCapture(e.pointerId)) {
          node.setPointerCapture(e.pointerId);
        }
        a = this$.block.range;
        if ((c = a.pages.length) > 1) {
          b = a.index;
          c = c - a.index - 1;
        } else {
          b = 0;
        }
        if (a.first) {
          b += 1;
          c += 1;
        }
        a = this$.pageSz;
        d = this$.dragbox;
        d[0] = a[0] + b * a[1];
        d[1] = d[0] / (b + 1);
        d[0] = d[0] - d[1];
        d[1] = d[1] / 2;
        d[4] = a[0] + c * a[1];
        d[3] = d[4] / (c + 1);
        d[4] = d[4] - d[3];
        d[3] = d[3] / 2;
        d[2] = node.clientWidth - d[0] - d[1] - d[3] - d[4];
        d[5] = b;
        d[7] = c;
        d[6] = state.data[1] - d[5] - d[7] - 2;
        a = state.data[0];
        (await this$.lock);
        this$.lock = null;
        if (node.hasPointerCapture(e.pointerId)) {
          node.releasePointerCapture(e.pointerId);
        }
        node.classList.remove('drag');
        this$.block.rootBox.classList.remove('active');
        if (a !== state.data[0]) {
          state.master.resolve(state);
          for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
            a = ref$[i$];
            if (a !== this$.block) {
              a.refresh();
            }
          }
        }
        return true;
      };
      this.drag = function(e){
        var d, c, b, a;
        e.preventDefault();
        e.stopPropagation();
        if (!this$.lock || this$.lockType !== 2) {
          return;
        }
        d = this$.dragbox;
        c = state.data[1];
        if ((b = e.offsetX) <= 0) {
          a = 0;
        } else if (b <= d[0]) {
          a = b * d[5] / d[0] | 0;
        } else if ((b -= d[0]) <= d[1]) {
          a = d[5];
        } else if ((b -= d[1]) <= d[2]) {
          a = d[5] + 1 + b * d[6] / d[2] | 0;
        } else if ((b -= d[2]) <= d[3]) {
          a = d[5] + d[6] + 1;
        } else if ((b -= d[3]) <= d[4]) {
          a = d[5] + d[6] + 2 + b * d[7] / d[4] | 0;
        } else {
          a = c - 1;
        }
        if (state.data[0] === a) {
          return;
        }
        state.data[0] = a;
        this$.block.refresh();
      };
      this.dragStop = function(e){
        e.preventDefault();
        e.stopPropagation();
        if (this$.lock && this$.lockType === 2) {
          this$.lock.resolve();
        }
      };
      this.goto = function(e){
        var a, b, c;
        e.preventDefault();
        e.stopPropagation();
        if (!this$.block.mode || this$.lock) {
          return;
        }
        a = e.currentTarget.parentNode.className;
        b = state.data[0];
        c = state.data[1] - 1;
        if (a.indexOf('first') !== -1) {
          a = 0;
        } else if (a.indexOf('last') !== -1) {
          a = c;
        } else if (a.indexOf('prev') !== -1) {
          if ((a = b - 1) < 0) {
            a = c;
          }
        } else if (a.indexOf('next') !== -1) {
          if ((a = b + 1) > c) {
            a = 0;
          }
        }
        if (a === b) {
          return;
        }
        state.data[0] = a;
        state.master.resolve(state);
        blocks.forEach(function(b){
          return b.refresh();
        });
        this$.block.focus();
      };
      this.rangeGoto = function(){
        var R, a, b, c;
        if (!(R = this$.block.range)) {
          return null;
        }
        a = [];
        b = -1;
        c = R.pages.length;
        while (++b < c) {
          a[b] = this$.rangeGotoFunc(b - R.index);
        }
        return a;
      }();
      this.resize = this.resizeFunc();
      this.observer = new ResizeObserver(this.resize);
    };
    Control.prototype = {
      attach: function(){
        var B, R, a, i$, ref$, len$, b;
        B = this.block;
        R = B.range;
        B.root.addEventListener('keydown', this.keyDown, true);
        B.root.addEventListener('keyup', this.keyUp, true);
        B.root.addEventListener('click', this.setFocus);
        B.rootBox.addEventListener('wheel', this.wheel, true);
        B.rootBox.addEventListener('pointerenter', this.hover);
        B.rootBox.addEventListener('pointerleave', this.unhover);
        if (B.gotoF) {
          a = B.gotoF.firstChild;
          a.addEventListener('click', this.goto);
          a = B.gotoL.firstChild;
          a.addEventListener('click', this.goto);
        }
        if (B.gotoP) {
          a = B.gotoP.firstChild;
          a.addEventListener('pointerdown', this.fastBackward);
          a.addEventListener('pointerup', this.fastStop);
          a.addEventListener('click', this.goto);
          a = B.gotoN.firstChild;
          a.addEventListener('pointerdown', this.fastForward);
          a.addEventListener('pointerup', this.fastStop);
          a.addEventListener('click', this.goto);
        }
        if (R) {
          if (R.first) {
            a = R.first.firstChild;
            a.addEventListener('click', this.goto);
            a = R.last.firstChild;
            a.addEventListener('click', this.goto);
          }
          for (i$ = 0, len$ = (ref$ = R.buttons).length; i$ < len$; ++i$) {
            b = i$;
            a = ref$[i$];
            a.addEventListener('click', this.rangeGoto[b]);
          }
          a = R.buttons[R.index];
          a.addEventListener('pointerdown', this.dragStart);
          B.rangeBox.addEventListener('pointermove', this.drag);
          B.rangeBox.addEventListener('pointerup', this.dragStop);
          this.observer.observe(B.root);
        }
      },
      detach: function(){
        if (R) {
          this.observer.disconnect();
        }
      },
      rangeGotoFunc: function(i){
        var this$ = this;
        return function(e){
          var a;
          e.preventDefault();
          e.stopPropagation();
          if (!this$.block.mode || this$.lock) {
            return;
          }
          if (this$.block.mode === 1) {
            a = state.data[0] + i;
          } else {
            a = this$.block.range.first
              ? 1 + i + this$.block.range.index
              : i + this$.block.range.index;
          }
          if (a === state.data[0]) {
            return;
          }
          state.data[0] = a;
          state.master.resolve(state);
          blocks.forEach(function(b){
            return b.refresh();
          });
          this$.block.focus();
        };
      },
      resizeFunc: function(){
        var pads, i$, len$, b, a, cs0, cs1, this$ = this;
        pads = ['padding-top', 'padding-right', 'padding-bottom', 'padding-left'];
        for (i$ = 0, len$ = pads.length; i$ < len$; ++i$) {
          b = i$;
          a = pads[i$];
          this.rootPads[b] = parseInt(this.rootCS.getPropertyValue(a));
        }
        a = this.block.range;
        b = this.pageSz;
        cs0 = getComputedStyle(a.pages[a.index]);
        b[0] = parseFloat(cs0.getPropertyValue('min-width'));
        cs1 = null;
        if (a.pages.length > 1) {
          cs1 = a.index > 0
            ? 0
            : a.index + 1;
          cs1 = getComputedStyle(a.pages[cs1]);
          b[1] = parseFloat(cs1.getPropertyValue('min-width'));
        }
        this.baseSz[1] = parseInt(this.rootCS.getPropertyValue('--height'));
        return function(e){
          var a;
          if (e) {
            e = e[0].contentRect.width;
          } else {
            a = this$.rootPads;
            a = a[1] + a[3];
            if ((e = this$.block.root.clientWidth - a) < 0) {
              e = 0;
            }
            this$.baseSz[0] = parseFloat(this$.rootBoxCS.getPropertyValue('width'));
          }
          this$.currentSz[0] = e;
          if ((e = e / this$.baseSz[0]) > 0.98) {
            e = 1;
          }
          a = e * this$.baseSz[1];
          if (Math.abs(a - this$.currentSz[1]) > 0.1) {
            this$.block.root.style.setProperty('--height', a + 'px');
            this$.currentSz[1] = a;
            a = this$.pageSz;
            a[0] = parseFloat(cs0.getPropertyValue('min-width'));
            a[1] = parseFloat(cs1.getPropertyValue('min-width'));
          }
        };
      },
      fast: async function(id, node, forward){
        var a, inc, beg, end, b, c, i$, ref$, len$, d;
        if ((a = state.data[1]) === 1) {
          return false;
        }
        this.lock = newPromise();
        (await Promise.race([delay(200), this.lock]));
        if (forward) {
          inc = 1;
          beg = 0;
          end = a;
        } else {
          inc = -1;
          beg = a - 1;
          end = -1;
        }
        a = state.data[0];
        b = inc;
        c = this.brake;
        if (!this.lock.pending) {
          if (!id) {
            if ((a = state.data[0] + b) === end) {
              a = beg;
            }
            state.data[0] = a;
            state.master.resolve(state);
            for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
              b = ref$[i$];
              b.refresh();
            }
          }
          this.lock = null;
          this.block.focus();
          return true;
        }
        this.block.rootBox.classList.add('active');
        node.parentNode.classList.add('fast');
        if (id !== null && !node.hasPointerCapture(id)) {
          node.setPointerCapture(id);
        }
        while (this.lock.pending) {
          if ((a = a + b) === end) {
            a = beg;
            b = inc;
            c = this.brake;
          }
          state.data[0] = a;
          (await this.refresh());
          if ((d = end - inc - inc * a) <= this.brake) {
            b = inc;
            d = 1000 / (1 + d);
            (await Promise.race([delay(d), this.lock]));
          } else if (inc * b < this.maxSpeed && --c === 0) {
            b = b + inc;
            c = this.brake;
          }
        }
        state.master.resolve(state);
        for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
          b = ref$[i$];
          if (b !== this.block) {
            b.refresh();
          }
        }
        if (id !== null && node.hasPointerCapture(id)) {
          if (id !== null) {
            node.releasePointerCapture(id);
          }
        }
        node.parentNode.classList.remove('fast');
        this.block.rootBox.classList.remove('active');
        (await delay(100));
        this.lock = null;
        this.block.focus();
        return true;
      },
      refresh: function(){
        var a, b;
        a = newPromise();
        b = this.block;
        requestAnimationFrame(function(){
          b.refresh();
          if (b.mode === 2) {
            b.focus();
          }
          requestAnimationFrame(function(){
            a.resolve();
          });
        });
        return a;
      }
    };
    BlockRange = function(box){
      var a, b, c;
      this.pages = a = arrayFrom$(box.querySelectorAll('.page.x'));
      this.buttons = a.map(function(a){
        return a.firstChild;
      });
      this.gap1 = box.querySelector('.gap.first');
      this.gap2 = box.querySelector('.gap.last');
      this.first = box.querySelector('.page.first');
      this.last = box.querySelector('.page.last');
      b = -1;
      c = a.length;
      while (++b < c) {
        if (a[b].classList.contains('current')) {
          break;
        }
      }
      this.index = b;
      this.current = a[b].firstChild;
      this.size = this.first ? c + 2 : c;
      this.nPages = Array(c).fill(0);
      this.nGap1 = 0;
      this.nGap2 = 0;
      this.nFirst = 0;
      this.nLast = 0;
      this.nCount = 0;
    };
    Block = function(root){
      var a, b;
      this.root = root;
      this.rootBox = root.firstChild;
      a = arrayFrom$(root.querySelectorAll('.goto.a'));
      b = arrayFrom$(root.querySelectorAll('.goto.b'));
      this.gotoF = (a.length && a[0]) || null;
      this.gotoL = (a.length && a[1]) || null;
      this.gotoP = (b.length && b[0]) || null;
      this.gotoN = (b.length && b[1]) || null;
      this.rangeBox = a = root.querySelector('.range');
      this.range = (a && new BlockRange(a)) || null;
      this.mode = 0;
      this.ctrl = new Control(this);
    };
    Block.prototype = {
      init: function(){
        var c;
        c = state.data[1];
        if (c && !this.mode) {
          this.ctrl.attach();
        } else if (!c && this.mode) {
          this.ctrl.detach();
        }
        this.refresh();
      },
      focus: function(){
        if (this.range && this.range.current) {
          this.range.current.focus();
        }
      },
      refresh: function(){
        var R, index, count, nPages, nGap1, nGap2, nFirst, nLast, nCount, mode, current, a, b, c, d, i$, len$;
        if (R = this.range) {
          index = state.data[0];
          count = state.data[1];
          nPages = R.nPages.slice().fill(0);
          nGap1 = 0;
          nGap2 = 0;
          nFirst = 0;
          nLast = 0;
          nCount = 0;
          if (!count) {
            mode = 0;
            current = null;
            nCount = 0;
          } else if (count > R.size) {
            mode = 1;
            current = R.buttons[R.index];
            nCount = R.size;
            if ((a = R.index - index) < 0) {
              nFirst = 1;
              nGap1 = 0 - a - 1;
              a = 0;
            }
            b = nPages.length - R.index - 1;
            c = count - index - 2;
            if (b > c) {
              b = R.index + c + 2;
            } else {
              nLast = count;
              nGap2 = c - b;
              b = nPages.length;
            }
            c = a - 1;
            d = index - R.index + a;
            while (++c < b) {
              nPages[c] = ++d;
            }
            if (a = nGap1 + nGap2) {
              a = 100 * nGap1 / a;
              if (a > 0 && a < 1) {
                a = 1;
              } else if (a > 99 && a < 100) {
                a = 99;
              } else {
                a = Math.round(a);
              }
              nGap1 = a;
              nGap2 = 100 - a;
            }
          } else {
            mode = 2;
            nCount = count;
            nFirst = a = (R.first && 1) || 0;
            b = -1;
            c = nPages.length;
            while (++b < c && a < count) {
              nPages[b] = ++a;
            }
            nLast = R.last && a < count ? count : 0;
            a = index + 1;
            current = a === nFirst
              ? R.first.firstChild
              : a === nLast
                ? R.last.firstChild
                : R.buttons[nPages.indexOf(a)];
          }
          if (mode !== this.mode) {
            if (!this.mode) {
              this.root.classList.remove('inactive');
              this.rootBox.classList.add('v');
            }
            if (!mode) {
              this.rootBox.classList.remove('v');
              this.root.classList.add('inactive');
            } else if (mode === 1) {
              this.rangeBox.classList.remove('static');
            } else {
              this.rangeBox.classList.add('static');
            }
            this.mode = mode;
          }
          if (R.nCount !== nCount) {
            this.rangeBox.style.setProperty('--count', nCount);
            R.nCount = nCount;
            if (nCount) {
              this.rootBox.classList.remove('v');
              this.ctrl.resize();
              this.rootBox.classList.add('v');
            }
          }
          if (R.nFirst !== nFirst) {
            if (!R.nFirst) {
              R.first.classList.add('v');
            } else if (!nFirst) {
              R.first.classList.remove('v');
            }
            R.nFirst = nFirst;
          }
          if (R.nGap1 !== nGap1) {
            if (!R.nGap1) {
              R.gap1.classList.add('v');
            } else if (!nGap1) {
              R.gap1.classList.remove('v');
            }
            R.gap1.style.flexGrow = R.nGap1 = nGap1;
          }
          c = R.nPages;
          for (i$ = 0, len$ = nPages.length; i$ < len$; ++i$) {
            b = i$;
            a = nPages[i$];
            if (a !== c[b]) {
              if (!c[b]) {
                R.pages[b].classList.add('v');
              } else if (!a) {
                R.pages[b].classList.remove('v');
              }
              R.buttons[b].textContent = c[b] = a;
            }
          }
          if (R.nGap2 !== nGap2) {
            if (!R.nGap2) {
              R.gap2.classList.add('v');
            } else if (!nGap2) {
              R.gap2.classList.remove('v');
            }
            R.gap2.style.flexGrow = R.nGap2 = nGap2;
          }
          if ((c = this.last) && x.last !== y.last) {
            c.classList.toggle('v', !!x.last);
            c.firstChild.textContent = x.last;
          }
          if (R.nLast !== nLast) {
            if (!R.nLast) {
              R.last.classList.add('v');
            } else if (!nLast) {
              R.last.classList.remove('v');
            }
            R.last.firstChild.textContent = R.nLast = nLast;
          }
          if (R.current !== current) {
            if (R.current) {
              R.current.parentNode.classList.remove('current');
            }
            if (current) {
              current.parentNode.classList.add('current');
            }
            R.current = current;
          }
        } else {
          mode = 2;
        }
      }
    };
    state = new BlockState('page', function(event, data){
      var i$, ref$, len$, a;
      switch (event) {
      case 'init':
        if (!state.ready) {
          state.data = [data.index, data.pages];
          blocks.forEach(function(b){
            b.init();
          });
        } else if (state.data[0] !== data.index || state.data[1] !== data.pages) {
          state.data[0] = data.index;
          state.data[1] = data.pages;
          blocks.forEach(function(b){
            b.refresh();
          });
        }
        break;
      case 'change':
        for (i$ = 0, len$ = (ref$ = blocks).length; i$ < len$; ++i$) {
          a = ref$[i$];
          if ((a = a.ctrl.lock) && a.pending) {
            return false;
          }
        }
      }
      return true;
    });
    blocks = arrayFrom$(document.querySelectorAll('.sm-paginator'));
    blocks = blocks.map(function(root){
      return new Block(root);
    });
    return state;
  }();
  smOrderer = function(){
    var Block, state, blocks;
    Block = function(root){
      this.root = root;
    };
    Block.prototype = {
      init: function(){
        true;
      },
      refresh: function(){
        true;
      }
    };
    state = new BlockState('order', function(event, data){
      switch (event) {
      case 'init':
        true;
        break;
      case 'change':
        true;
      }
      return true;
    });
    blocks = arrayFrom$(document.querySelectorAll('.sm-order'));
    blocks = blocks.map(function(root){
      return new Block(root);
    });
    return state;
  }();
  smSizer = function(){
    var Block, state, blocks;
    Block = function(root){
      this.root = root;
    };
    Block.prototype = {
      refresh: function(data){
        this.root.style.setProperty('--sm-width', data.width + 'px');
        this.root.style.setProperty('--sm-height', data.height + 'px');
      }
    };
    state = new BlockState('sizer', function(event, data){
      switch (event) {
      case 'resize':
        blocks.forEach(function(b){
          b.refresh(data);
        });
      }
      return true;
    });
    blocks = arrayFrom$(document.querySelectorAll('.sm-sizer'));
    blocks = blocks.map(function(root){
      return new Block(root);
    });
    return state;
  }();
  if (smProducts) {
    if (!(await smCart.load())) {
      return null;
    }
    if (smCategoryFilter) {
      smProducts.add(smCategoryFilter);
    }
    if (smPaginator) {
      smProducts.add(smPaginator);
    }
    if (smSizer) {
      smProducts.add(smSizer);
    }
    smProducts.load();
  }
  return smProducts;
}();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}